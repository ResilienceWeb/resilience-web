
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Ownership` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Ownership
 * 
 */
export type OwnershipModel = runtime.Types.Result.DefaultSelection<Prisma.$OwnershipPayload>

export type AggregateOwnership = {
  _count: OwnershipCountAggregateOutputType | null
  _avg: OwnershipAvgAggregateOutputType | null
  _sum: OwnershipSumAggregateOutputType | null
  _min: OwnershipMinAggregateOutputType | null
  _max: OwnershipMaxAggregateOutputType | null
}

export type OwnershipAvgAggregateOutputType = {
  id: number | null
}

export type OwnershipSumAggregateOutputType = {
  id: number | null
}

export type OwnershipMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  email: string | null
}

export type OwnershipMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  email: string | null
}

export type OwnershipCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  email: number
  _all: number
}


export type OwnershipAvgAggregateInputType = {
  id?: true
}

export type OwnershipSumAggregateInputType = {
  id?: true
}

export type OwnershipMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  email?: true
}

export type OwnershipMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  email?: true
}

export type OwnershipCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  email?: true
  _all?: true
}

export type OwnershipAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Ownership to aggregate.
   */
  where?: Prisma.OwnershipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ownerships to fetch.
   */
  orderBy?: Prisma.OwnershipOrderByWithRelationInput | Prisma.OwnershipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OwnershipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ownerships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ownerships.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Ownerships
  **/
  _count?: true | OwnershipCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: OwnershipAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: OwnershipSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OwnershipMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OwnershipMaxAggregateInputType
}

export type GetOwnershipAggregateType<T extends OwnershipAggregateArgs> = {
      [P in keyof T & keyof AggregateOwnership]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOwnership[P]>
    : Prisma.GetScalarType<T[P], AggregateOwnership[P]>
}




export type OwnershipGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OwnershipWhereInput
  orderBy?: Prisma.OwnershipOrderByWithAggregationInput | Prisma.OwnershipOrderByWithAggregationInput[]
  by: Prisma.OwnershipScalarFieldEnum[] | Prisma.OwnershipScalarFieldEnum
  having?: Prisma.OwnershipScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OwnershipCountAggregateInputType | true
  _avg?: OwnershipAvgAggregateInputType
  _sum?: OwnershipSumAggregateInputType
  _min?: OwnershipMinAggregateInputType
  _max?: OwnershipMaxAggregateInputType
}

export type OwnershipGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  email: string
  _count: OwnershipCountAggregateOutputType | null
  _avg: OwnershipAvgAggregateOutputType | null
  _sum: OwnershipSumAggregateOutputType | null
  _min: OwnershipMinAggregateOutputType | null
  _max: OwnershipMaxAggregateOutputType | null
}

type GetOwnershipGroupByPayload<T extends OwnershipGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OwnershipGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OwnershipGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OwnershipGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OwnershipGroupByOutputType[P]>
      }
    >
  >



export type OwnershipWhereInput = {
  AND?: Prisma.OwnershipWhereInput | Prisma.OwnershipWhereInput[]
  OR?: Prisma.OwnershipWhereInput[]
  NOT?: Prisma.OwnershipWhereInput | Prisma.OwnershipWhereInput[]
  id?: Prisma.IntFilter<"Ownership"> | number
  createdAt?: Prisma.DateTimeFilter<"Ownership"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Ownership"> | Date | string
  email?: Prisma.StringFilter<"Ownership"> | string
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  webs?: Prisma.WebListRelationFilter
}

export type OwnershipOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  webs?: Prisma.WebOrderByRelationAggregateInput
}

export type OwnershipWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  email?: string
  AND?: Prisma.OwnershipWhereInput | Prisma.OwnershipWhereInput[]
  OR?: Prisma.OwnershipWhereInput[]
  NOT?: Prisma.OwnershipWhereInput | Prisma.OwnershipWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Ownership"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Ownership"> | Date | string
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  webs?: Prisma.WebListRelationFilter
}, "id" | "email">

export type OwnershipOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
  _count?: Prisma.OwnershipCountOrderByAggregateInput
  _avg?: Prisma.OwnershipAvgOrderByAggregateInput
  _max?: Prisma.OwnershipMaxOrderByAggregateInput
  _min?: Prisma.OwnershipMinOrderByAggregateInput
  _sum?: Prisma.OwnershipSumOrderByAggregateInput
}

export type OwnershipScalarWhereWithAggregatesInput = {
  AND?: Prisma.OwnershipScalarWhereWithAggregatesInput | Prisma.OwnershipScalarWhereWithAggregatesInput[]
  OR?: Prisma.OwnershipScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OwnershipScalarWhereWithAggregatesInput | Prisma.OwnershipScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Ownership"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Ownership"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Ownership"> | Date | string
  email?: Prisma.StringWithAggregatesFilter<"Ownership"> | string
}

export type OwnershipCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  user?: Prisma.UserCreateNestedOneWithoutOwnershipsInput
  webs?: Prisma.WebCreateNestedManyWithoutOwnershipsInput
}

export type OwnershipUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  webs?: Prisma.WebUncheckedCreateNestedManyWithoutOwnershipsInput
}

export type OwnershipUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneWithoutOwnershipsNestedInput
  webs?: Prisma.WebUpdateManyWithoutOwnershipsNestedInput
}

export type OwnershipUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  webs?: Prisma.WebUncheckedUpdateManyWithoutOwnershipsNestedInput
}

export type OwnershipCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
}

export type OwnershipUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OwnershipUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OwnershipListRelationFilter = {
  every?: Prisma.OwnershipWhereInput
  some?: Prisma.OwnershipWhereInput
  none?: Prisma.OwnershipWhereInput
}

export type OwnershipOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OwnershipCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type OwnershipAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type OwnershipMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type OwnershipMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type OwnershipSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type OwnershipCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.OwnershipCreateWithoutUserInput, Prisma.OwnershipUncheckedCreateWithoutUserInput> | Prisma.OwnershipCreateWithoutUserInput[] | Prisma.OwnershipUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.OwnershipCreateOrConnectWithoutUserInput | Prisma.OwnershipCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.OwnershipCreateManyUserInputEnvelope
  connect?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
}

export type OwnershipUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.OwnershipCreateWithoutUserInput, Prisma.OwnershipUncheckedCreateWithoutUserInput> | Prisma.OwnershipCreateWithoutUserInput[] | Prisma.OwnershipUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.OwnershipCreateOrConnectWithoutUserInput | Prisma.OwnershipCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.OwnershipCreateManyUserInputEnvelope
  connect?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
}

export type OwnershipUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.OwnershipCreateWithoutUserInput, Prisma.OwnershipUncheckedCreateWithoutUserInput> | Prisma.OwnershipCreateWithoutUserInput[] | Prisma.OwnershipUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.OwnershipCreateOrConnectWithoutUserInput | Prisma.OwnershipCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.OwnershipUpsertWithWhereUniqueWithoutUserInput | Prisma.OwnershipUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.OwnershipCreateManyUserInputEnvelope
  set?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  disconnect?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  delete?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  connect?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  update?: Prisma.OwnershipUpdateWithWhereUniqueWithoutUserInput | Prisma.OwnershipUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.OwnershipUpdateManyWithWhereWithoutUserInput | Prisma.OwnershipUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.OwnershipScalarWhereInput | Prisma.OwnershipScalarWhereInput[]
}

export type OwnershipUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.OwnershipCreateWithoutUserInput, Prisma.OwnershipUncheckedCreateWithoutUserInput> | Prisma.OwnershipCreateWithoutUserInput[] | Prisma.OwnershipUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.OwnershipCreateOrConnectWithoutUserInput | Prisma.OwnershipCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.OwnershipUpsertWithWhereUniqueWithoutUserInput | Prisma.OwnershipUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.OwnershipCreateManyUserInputEnvelope
  set?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  disconnect?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  delete?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  connect?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  update?: Prisma.OwnershipUpdateWithWhereUniqueWithoutUserInput | Prisma.OwnershipUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.OwnershipUpdateManyWithWhereWithoutUserInput | Prisma.OwnershipUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.OwnershipScalarWhereInput | Prisma.OwnershipScalarWhereInput[]
}

export type OwnershipCreateNestedManyWithoutWebsInput = {
  create?: Prisma.XOR<Prisma.OwnershipCreateWithoutWebsInput, Prisma.OwnershipUncheckedCreateWithoutWebsInput> | Prisma.OwnershipCreateWithoutWebsInput[] | Prisma.OwnershipUncheckedCreateWithoutWebsInput[]
  connectOrCreate?: Prisma.OwnershipCreateOrConnectWithoutWebsInput | Prisma.OwnershipCreateOrConnectWithoutWebsInput[]
  connect?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
}

export type OwnershipUncheckedCreateNestedManyWithoutWebsInput = {
  create?: Prisma.XOR<Prisma.OwnershipCreateWithoutWebsInput, Prisma.OwnershipUncheckedCreateWithoutWebsInput> | Prisma.OwnershipCreateWithoutWebsInput[] | Prisma.OwnershipUncheckedCreateWithoutWebsInput[]
  connectOrCreate?: Prisma.OwnershipCreateOrConnectWithoutWebsInput | Prisma.OwnershipCreateOrConnectWithoutWebsInput[]
  connect?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
}

export type OwnershipUpdateManyWithoutWebsNestedInput = {
  create?: Prisma.XOR<Prisma.OwnershipCreateWithoutWebsInput, Prisma.OwnershipUncheckedCreateWithoutWebsInput> | Prisma.OwnershipCreateWithoutWebsInput[] | Prisma.OwnershipUncheckedCreateWithoutWebsInput[]
  connectOrCreate?: Prisma.OwnershipCreateOrConnectWithoutWebsInput | Prisma.OwnershipCreateOrConnectWithoutWebsInput[]
  upsert?: Prisma.OwnershipUpsertWithWhereUniqueWithoutWebsInput | Prisma.OwnershipUpsertWithWhereUniqueWithoutWebsInput[]
  set?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  disconnect?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  delete?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  connect?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  update?: Prisma.OwnershipUpdateWithWhereUniqueWithoutWebsInput | Prisma.OwnershipUpdateWithWhereUniqueWithoutWebsInput[]
  updateMany?: Prisma.OwnershipUpdateManyWithWhereWithoutWebsInput | Prisma.OwnershipUpdateManyWithWhereWithoutWebsInput[]
  deleteMany?: Prisma.OwnershipScalarWhereInput | Prisma.OwnershipScalarWhereInput[]
}

export type OwnershipUncheckedUpdateManyWithoutWebsNestedInput = {
  create?: Prisma.XOR<Prisma.OwnershipCreateWithoutWebsInput, Prisma.OwnershipUncheckedCreateWithoutWebsInput> | Prisma.OwnershipCreateWithoutWebsInput[] | Prisma.OwnershipUncheckedCreateWithoutWebsInput[]
  connectOrCreate?: Prisma.OwnershipCreateOrConnectWithoutWebsInput | Prisma.OwnershipCreateOrConnectWithoutWebsInput[]
  upsert?: Prisma.OwnershipUpsertWithWhereUniqueWithoutWebsInput | Prisma.OwnershipUpsertWithWhereUniqueWithoutWebsInput[]
  set?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  disconnect?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  delete?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  connect?: Prisma.OwnershipWhereUniqueInput | Prisma.OwnershipWhereUniqueInput[]
  update?: Prisma.OwnershipUpdateWithWhereUniqueWithoutWebsInput | Prisma.OwnershipUpdateWithWhereUniqueWithoutWebsInput[]
  updateMany?: Prisma.OwnershipUpdateManyWithWhereWithoutWebsInput | Prisma.OwnershipUpdateManyWithWhereWithoutWebsInput[]
  deleteMany?: Prisma.OwnershipScalarWhereInput | Prisma.OwnershipScalarWhereInput[]
}

export type OwnershipCreateWithoutUserInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  webs?: Prisma.WebCreateNestedManyWithoutOwnershipsInput
}

export type OwnershipUncheckedCreateWithoutUserInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  webs?: Prisma.WebUncheckedCreateNestedManyWithoutOwnershipsInput
}

export type OwnershipCreateOrConnectWithoutUserInput = {
  where: Prisma.OwnershipWhereUniqueInput
  create: Prisma.XOR<Prisma.OwnershipCreateWithoutUserInput, Prisma.OwnershipUncheckedCreateWithoutUserInput>
}

export type OwnershipCreateManyUserInputEnvelope = {
  data: Prisma.OwnershipCreateManyUserInput | Prisma.OwnershipCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type OwnershipUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.OwnershipWhereUniqueInput
  update: Prisma.XOR<Prisma.OwnershipUpdateWithoutUserInput, Prisma.OwnershipUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.OwnershipCreateWithoutUserInput, Prisma.OwnershipUncheckedCreateWithoutUserInput>
}

export type OwnershipUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.OwnershipWhereUniqueInput
  data: Prisma.XOR<Prisma.OwnershipUpdateWithoutUserInput, Prisma.OwnershipUncheckedUpdateWithoutUserInput>
}

export type OwnershipUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.OwnershipScalarWhereInput
  data: Prisma.XOR<Prisma.OwnershipUpdateManyMutationInput, Prisma.OwnershipUncheckedUpdateManyWithoutUserInput>
}

export type OwnershipScalarWhereInput = {
  AND?: Prisma.OwnershipScalarWhereInput | Prisma.OwnershipScalarWhereInput[]
  OR?: Prisma.OwnershipScalarWhereInput[]
  NOT?: Prisma.OwnershipScalarWhereInput | Prisma.OwnershipScalarWhereInput[]
  id?: Prisma.IntFilter<"Ownership"> | number
  createdAt?: Prisma.DateTimeFilter<"Ownership"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Ownership"> | Date | string
  email?: Prisma.StringFilter<"Ownership"> | string
}

export type OwnershipCreateWithoutWebsInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  user?: Prisma.UserCreateNestedOneWithoutOwnershipsInput
}

export type OwnershipUncheckedCreateWithoutWebsInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
}

export type OwnershipCreateOrConnectWithoutWebsInput = {
  where: Prisma.OwnershipWhereUniqueInput
  create: Prisma.XOR<Prisma.OwnershipCreateWithoutWebsInput, Prisma.OwnershipUncheckedCreateWithoutWebsInput>
}

export type OwnershipUpsertWithWhereUniqueWithoutWebsInput = {
  where: Prisma.OwnershipWhereUniqueInput
  update: Prisma.XOR<Prisma.OwnershipUpdateWithoutWebsInput, Prisma.OwnershipUncheckedUpdateWithoutWebsInput>
  create: Prisma.XOR<Prisma.OwnershipCreateWithoutWebsInput, Prisma.OwnershipUncheckedCreateWithoutWebsInput>
}

export type OwnershipUpdateWithWhereUniqueWithoutWebsInput = {
  where: Prisma.OwnershipWhereUniqueInput
  data: Prisma.XOR<Prisma.OwnershipUpdateWithoutWebsInput, Prisma.OwnershipUncheckedUpdateWithoutWebsInput>
}

export type OwnershipUpdateManyWithWhereWithoutWebsInput = {
  where: Prisma.OwnershipScalarWhereInput
  data: Prisma.XOR<Prisma.OwnershipUpdateManyMutationInput, Prisma.OwnershipUncheckedUpdateManyWithoutWebsInput>
}

export type OwnershipCreateManyUserInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OwnershipUpdateWithoutUserInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  webs?: Prisma.WebUpdateManyWithoutOwnershipsNestedInput
}

export type OwnershipUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  webs?: Prisma.WebUncheckedUpdateManyWithoutOwnershipsNestedInput
}

export type OwnershipUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OwnershipUpdateWithoutWebsInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneWithoutOwnershipsNestedInput
}

export type OwnershipUncheckedUpdateWithoutWebsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OwnershipUncheckedUpdateManyWithoutWebsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type OwnershipCountOutputType
 */

export type OwnershipCountOutputType = {
  webs: number
}

export type OwnershipCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  webs?: boolean | OwnershipCountOutputTypeCountWebsArgs
}

/**
 * OwnershipCountOutputType without action
 */
export type OwnershipCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OwnershipCountOutputType
   */
  select?: Prisma.OwnershipCountOutputTypeSelect<ExtArgs> | null
}

/**
 * OwnershipCountOutputType without action
 */
export type OwnershipCountOutputTypeCountWebsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WebWhereInput
}


export type OwnershipSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  user?: boolean | Prisma.Ownership$userArgs<ExtArgs>
  webs?: boolean | Prisma.Ownership$websArgs<ExtArgs>
  _count?: boolean | Prisma.OwnershipCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["ownership"]>

export type OwnershipSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  user?: boolean | Prisma.Ownership$userArgs<ExtArgs>
}, ExtArgs["result"]["ownership"]>

export type OwnershipSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  user?: boolean | Prisma.Ownership$userArgs<ExtArgs>
}, ExtArgs["result"]["ownership"]>

export type OwnershipSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
}

export type OwnershipOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "email", ExtArgs["result"]["ownership"]>
export type OwnershipInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Ownership$userArgs<ExtArgs>
  webs?: boolean | Prisma.Ownership$websArgs<ExtArgs>
  _count?: boolean | Prisma.OwnershipCountOutputTypeDefaultArgs<ExtArgs>
}
export type OwnershipIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Ownership$userArgs<ExtArgs>
}
export type OwnershipIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Ownership$userArgs<ExtArgs>
}

export type $OwnershipPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Ownership"
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null
    webs: Prisma.$WebPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    email: string
  }, ExtArgs["result"]["ownership"]>
  composites: {}
}

export type OwnershipGetPayload<S extends boolean | null | undefined | OwnershipDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OwnershipPayload, S>

export type OwnershipCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OwnershipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OwnershipCountAggregateInputType | true
  }

export interface OwnershipDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ownership'], meta: { name: 'Ownership' } }
  /**
   * Find zero or one Ownership that matches the filter.
   * @param {OwnershipFindUniqueArgs} args - Arguments to find a Ownership
   * @example
   * // Get one Ownership
   * const ownership = await prisma.ownership.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OwnershipFindUniqueArgs>(args: Prisma.SelectSubset<T, OwnershipFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OwnershipClient<runtime.Types.Result.GetResult<Prisma.$OwnershipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Ownership that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OwnershipFindUniqueOrThrowArgs} args - Arguments to find a Ownership
   * @example
   * // Get one Ownership
   * const ownership = await prisma.ownership.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OwnershipFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OwnershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OwnershipClient<runtime.Types.Result.GetResult<Prisma.$OwnershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ownership that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnershipFindFirstArgs} args - Arguments to find a Ownership
   * @example
   * // Get one Ownership
   * const ownership = await prisma.ownership.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OwnershipFindFirstArgs>(args?: Prisma.SelectSubset<T, OwnershipFindFirstArgs<ExtArgs>>): Prisma.Prisma__OwnershipClient<runtime.Types.Result.GetResult<Prisma.$OwnershipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ownership that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnershipFindFirstOrThrowArgs} args - Arguments to find a Ownership
   * @example
   * // Get one Ownership
   * const ownership = await prisma.ownership.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OwnershipFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OwnershipFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OwnershipClient<runtime.Types.Result.GetResult<Prisma.$OwnershipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Ownerships that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnershipFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Ownerships
   * const ownerships = await prisma.ownership.findMany()
   * 
   * // Get first 10 Ownerships
   * const ownerships = await prisma.ownership.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const ownershipWithIdOnly = await prisma.ownership.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OwnershipFindManyArgs>(args?: Prisma.SelectSubset<T, OwnershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OwnershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Ownership.
   * @param {OwnershipCreateArgs} args - Arguments to create a Ownership.
   * @example
   * // Create one Ownership
   * const Ownership = await prisma.ownership.create({
   *   data: {
   *     // ... data to create a Ownership
   *   }
   * })
   * 
   */
  create<T extends OwnershipCreateArgs>(args: Prisma.SelectSubset<T, OwnershipCreateArgs<ExtArgs>>): Prisma.Prisma__OwnershipClient<runtime.Types.Result.GetResult<Prisma.$OwnershipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Ownerships.
   * @param {OwnershipCreateManyArgs} args - Arguments to create many Ownerships.
   * @example
   * // Create many Ownerships
   * const ownership = await prisma.ownership.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OwnershipCreateManyArgs>(args?: Prisma.SelectSubset<T, OwnershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Ownerships and returns the data saved in the database.
   * @param {OwnershipCreateManyAndReturnArgs} args - Arguments to create many Ownerships.
   * @example
   * // Create many Ownerships
   * const ownership = await prisma.ownership.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Ownerships and only return the `id`
   * const ownershipWithIdOnly = await prisma.ownership.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OwnershipCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OwnershipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OwnershipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Ownership.
   * @param {OwnershipDeleteArgs} args - Arguments to delete one Ownership.
   * @example
   * // Delete one Ownership
   * const Ownership = await prisma.ownership.delete({
   *   where: {
   *     // ... filter to delete one Ownership
   *   }
   * })
   * 
   */
  delete<T extends OwnershipDeleteArgs>(args: Prisma.SelectSubset<T, OwnershipDeleteArgs<ExtArgs>>): Prisma.Prisma__OwnershipClient<runtime.Types.Result.GetResult<Prisma.$OwnershipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Ownership.
   * @param {OwnershipUpdateArgs} args - Arguments to update one Ownership.
   * @example
   * // Update one Ownership
   * const ownership = await prisma.ownership.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OwnershipUpdateArgs>(args: Prisma.SelectSubset<T, OwnershipUpdateArgs<ExtArgs>>): Prisma.Prisma__OwnershipClient<runtime.Types.Result.GetResult<Prisma.$OwnershipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Ownerships.
   * @param {OwnershipDeleteManyArgs} args - Arguments to filter Ownerships to delete.
   * @example
   * // Delete a few Ownerships
   * const { count } = await prisma.ownership.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OwnershipDeleteManyArgs>(args?: Prisma.SelectSubset<T, OwnershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ownerships.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnershipUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Ownerships
   * const ownership = await prisma.ownership.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OwnershipUpdateManyArgs>(args: Prisma.SelectSubset<T, OwnershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ownerships and returns the data updated in the database.
   * @param {OwnershipUpdateManyAndReturnArgs} args - Arguments to update many Ownerships.
   * @example
   * // Update many Ownerships
   * const ownership = await prisma.ownership.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Ownerships and only return the `id`
   * const ownershipWithIdOnly = await prisma.ownership.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OwnershipUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OwnershipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OwnershipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Ownership.
   * @param {OwnershipUpsertArgs} args - Arguments to update or create a Ownership.
   * @example
   * // Update or create a Ownership
   * const ownership = await prisma.ownership.upsert({
   *   create: {
   *     // ... data to create a Ownership
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Ownership we want to update
   *   }
   * })
   */
  upsert<T extends OwnershipUpsertArgs>(args: Prisma.SelectSubset<T, OwnershipUpsertArgs<ExtArgs>>): Prisma.Prisma__OwnershipClient<runtime.Types.Result.GetResult<Prisma.$OwnershipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Ownerships.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnershipCountArgs} args - Arguments to filter Ownerships to count.
   * @example
   * // Count the number of Ownerships
   * const count = await prisma.ownership.count({
   *   where: {
   *     // ... the filter for the Ownerships we want to count
   *   }
   * })
  **/
  count<T extends OwnershipCountArgs>(
    args?: Prisma.Subset<T, OwnershipCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OwnershipCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Ownership.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OwnershipAggregateArgs>(args: Prisma.Subset<T, OwnershipAggregateArgs>): Prisma.PrismaPromise<GetOwnershipAggregateType<T>>

  /**
   * Group by Ownership.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnershipGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OwnershipGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OwnershipGroupByArgs['orderBy'] }
      : { orderBy?: OwnershipGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OwnershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOwnershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Ownership model
 */
readonly fields: OwnershipFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Ownership.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OwnershipClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.Ownership$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Ownership$userArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  webs<T extends Prisma.Ownership$websArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Ownership$websArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Ownership model
 */
export interface OwnershipFieldRefs {
  readonly id: Prisma.FieldRef<"Ownership", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Ownership", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Ownership", 'DateTime'>
  readonly email: Prisma.FieldRef<"Ownership", 'String'>
}
    

// Custom InputTypes
/**
 * Ownership findUnique
 */
export type OwnershipFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ownership
   */
  select?: Prisma.OwnershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ownership
   */
  omit?: Prisma.OwnershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnershipInclude<ExtArgs> | null
  /**
   * Filter, which Ownership to fetch.
   */
  where: Prisma.OwnershipWhereUniqueInput
}

/**
 * Ownership findUniqueOrThrow
 */
export type OwnershipFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ownership
   */
  select?: Prisma.OwnershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ownership
   */
  omit?: Prisma.OwnershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnershipInclude<ExtArgs> | null
  /**
   * Filter, which Ownership to fetch.
   */
  where: Prisma.OwnershipWhereUniqueInput
}

/**
 * Ownership findFirst
 */
export type OwnershipFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ownership
   */
  select?: Prisma.OwnershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ownership
   */
  omit?: Prisma.OwnershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnershipInclude<ExtArgs> | null
  /**
   * Filter, which Ownership to fetch.
   */
  where?: Prisma.OwnershipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ownerships to fetch.
   */
  orderBy?: Prisma.OwnershipOrderByWithRelationInput | Prisma.OwnershipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Ownerships.
   */
  cursor?: Prisma.OwnershipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ownerships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ownerships.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Ownerships.
   */
  distinct?: Prisma.OwnershipScalarFieldEnum | Prisma.OwnershipScalarFieldEnum[]
}

/**
 * Ownership findFirstOrThrow
 */
export type OwnershipFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ownership
   */
  select?: Prisma.OwnershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ownership
   */
  omit?: Prisma.OwnershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnershipInclude<ExtArgs> | null
  /**
   * Filter, which Ownership to fetch.
   */
  where?: Prisma.OwnershipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ownerships to fetch.
   */
  orderBy?: Prisma.OwnershipOrderByWithRelationInput | Prisma.OwnershipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Ownerships.
   */
  cursor?: Prisma.OwnershipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ownerships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ownerships.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Ownerships.
   */
  distinct?: Prisma.OwnershipScalarFieldEnum | Prisma.OwnershipScalarFieldEnum[]
}

/**
 * Ownership findMany
 */
export type OwnershipFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ownership
   */
  select?: Prisma.OwnershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ownership
   */
  omit?: Prisma.OwnershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnershipInclude<ExtArgs> | null
  /**
   * Filter, which Ownerships to fetch.
   */
  where?: Prisma.OwnershipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ownerships to fetch.
   */
  orderBy?: Prisma.OwnershipOrderByWithRelationInput | Prisma.OwnershipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Ownerships.
   */
  cursor?: Prisma.OwnershipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ownerships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ownerships.
   */
  skip?: number
  distinct?: Prisma.OwnershipScalarFieldEnum | Prisma.OwnershipScalarFieldEnum[]
}

/**
 * Ownership create
 */
export type OwnershipCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ownership
   */
  select?: Prisma.OwnershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ownership
   */
  omit?: Prisma.OwnershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnershipInclude<ExtArgs> | null
  /**
   * The data needed to create a Ownership.
   */
  data: Prisma.XOR<Prisma.OwnershipCreateInput, Prisma.OwnershipUncheckedCreateInput>
}

/**
 * Ownership createMany
 */
export type OwnershipCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Ownerships.
   */
  data: Prisma.OwnershipCreateManyInput | Prisma.OwnershipCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Ownership createManyAndReturn
 */
export type OwnershipCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ownership
   */
  select?: Prisma.OwnershipSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Ownership
   */
  omit?: Prisma.OwnershipOmit<ExtArgs> | null
  /**
   * The data used to create many Ownerships.
   */
  data: Prisma.OwnershipCreateManyInput | Prisma.OwnershipCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnershipIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Ownership update
 */
export type OwnershipUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ownership
   */
  select?: Prisma.OwnershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ownership
   */
  omit?: Prisma.OwnershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnershipInclude<ExtArgs> | null
  /**
   * The data needed to update a Ownership.
   */
  data: Prisma.XOR<Prisma.OwnershipUpdateInput, Prisma.OwnershipUncheckedUpdateInput>
  /**
   * Choose, which Ownership to update.
   */
  where: Prisma.OwnershipWhereUniqueInput
}

/**
 * Ownership updateMany
 */
export type OwnershipUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Ownerships.
   */
  data: Prisma.XOR<Prisma.OwnershipUpdateManyMutationInput, Prisma.OwnershipUncheckedUpdateManyInput>
  /**
   * Filter which Ownerships to update
   */
  where?: Prisma.OwnershipWhereInput
  /**
   * Limit how many Ownerships to update.
   */
  limit?: number
}

/**
 * Ownership updateManyAndReturn
 */
export type OwnershipUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ownership
   */
  select?: Prisma.OwnershipSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Ownership
   */
  omit?: Prisma.OwnershipOmit<ExtArgs> | null
  /**
   * The data used to update Ownerships.
   */
  data: Prisma.XOR<Prisma.OwnershipUpdateManyMutationInput, Prisma.OwnershipUncheckedUpdateManyInput>
  /**
   * Filter which Ownerships to update
   */
  where?: Prisma.OwnershipWhereInput
  /**
   * Limit how many Ownerships to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnershipIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Ownership upsert
 */
export type OwnershipUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ownership
   */
  select?: Prisma.OwnershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ownership
   */
  omit?: Prisma.OwnershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnershipInclude<ExtArgs> | null
  /**
   * The filter to search for the Ownership to update in case it exists.
   */
  where: Prisma.OwnershipWhereUniqueInput
  /**
   * In case the Ownership found by the `where` argument doesn't exist, create a new Ownership with this data.
   */
  create: Prisma.XOR<Prisma.OwnershipCreateInput, Prisma.OwnershipUncheckedCreateInput>
  /**
   * In case the Ownership was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OwnershipUpdateInput, Prisma.OwnershipUncheckedUpdateInput>
}

/**
 * Ownership delete
 */
export type OwnershipDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ownership
   */
  select?: Prisma.OwnershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ownership
   */
  omit?: Prisma.OwnershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnershipInclude<ExtArgs> | null
  /**
   * Filter which Ownership to delete.
   */
  where: Prisma.OwnershipWhereUniqueInput
}

/**
 * Ownership deleteMany
 */
export type OwnershipDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Ownerships to delete
   */
  where?: Prisma.OwnershipWhereInput
  /**
   * Limit how many Ownerships to delete.
   */
  limit?: number
}

/**
 * Ownership.user
 */
export type Ownership$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * Ownership.webs
 */
export type Ownership$websArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Web
   */
  select?: Prisma.WebSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Web
   */
  omit?: Prisma.WebOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebInclude<ExtArgs> | null
  where?: Prisma.WebWhereInput
  orderBy?: Prisma.WebOrderByWithRelationInput | Prisma.WebOrderByWithRelationInput[]
  cursor?: Prisma.WebWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WebScalarFieldEnum | Prisma.WebScalarFieldEnum[]
}

/**
 * Ownership without action
 */
export type OwnershipDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ownership
   */
  select?: Prisma.OwnershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ownership
   */
  omit?: Prisma.OwnershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnershipInclude<ExtArgs> | null
}
