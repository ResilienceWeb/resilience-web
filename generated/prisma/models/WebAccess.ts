
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `WebAccess` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model WebAccess
 * 
 */
export type WebAccessModel = runtime.Types.Result.DefaultSelection<Prisma.$WebAccessPayload>

export type AggregateWebAccess = {
  _count: WebAccessCountAggregateOutputType | null
  _avg: WebAccessAvgAggregateOutputType | null
  _sum: WebAccessSumAggregateOutputType | null
  _min: WebAccessMinAggregateOutputType | null
  _max: WebAccessMaxAggregateOutputType | null
}

export type WebAccessAvgAggregateOutputType = {
  id: number | null
  webId: number | null
}

export type WebAccessSumAggregateOutputType = {
  id: number | null
  webId: number | null
}

export type WebAccessMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  email: string | null
  webId: number | null
  role: $Enums.WebRole | null
}

export type WebAccessMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  email: string | null
  webId: number | null
  role: $Enums.WebRole | null
}

export type WebAccessCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  email: number
  webId: number
  role: number
  _all: number
}


export type WebAccessAvgAggregateInputType = {
  id?: true
  webId?: true
}

export type WebAccessSumAggregateInputType = {
  id?: true
  webId?: true
}

export type WebAccessMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  email?: true
  webId?: true
  role?: true
}

export type WebAccessMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  email?: true
  webId?: true
  role?: true
}

export type WebAccessCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  email?: true
  webId?: true
  role?: true
  _all?: true
}

export type WebAccessAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WebAccess to aggregate.
   */
  where?: Prisma.WebAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebAccesses to fetch.
   */
  orderBy?: Prisma.WebAccessOrderByWithRelationInput | Prisma.WebAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WebAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WebAccesses
  **/
  _count?: true | WebAccessCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WebAccessAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WebAccessSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WebAccessMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WebAccessMaxAggregateInputType
}

export type GetWebAccessAggregateType<T extends WebAccessAggregateArgs> = {
      [P in keyof T & keyof AggregateWebAccess]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWebAccess[P]>
    : Prisma.GetScalarType<T[P], AggregateWebAccess[P]>
}




export type WebAccessGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WebAccessWhereInput
  orderBy?: Prisma.WebAccessOrderByWithAggregationInput | Prisma.WebAccessOrderByWithAggregationInput[]
  by: Prisma.WebAccessScalarFieldEnum[] | Prisma.WebAccessScalarFieldEnum
  having?: Prisma.WebAccessScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WebAccessCountAggregateInputType | true
  _avg?: WebAccessAvgAggregateInputType
  _sum?: WebAccessSumAggregateInputType
  _min?: WebAccessMinAggregateInputType
  _max?: WebAccessMaxAggregateInputType
}

export type WebAccessGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  email: string
  webId: number
  role: $Enums.WebRole
  _count: WebAccessCountAggregateOutputType | null
  _avg: WebAccessAvgAggregateOutputType | null
  _sum: WebAccessSumAggregateOutputType | null
  _min: WebAccessMinAggregateOutputType | null
  _max: WebAccessMaxAggregateOutputType | null
}

type GetWebAccessGroupByPayload<T extends WebAccessGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WebAccessGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WebAccessGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WebAccessGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WebAccessGroupByOutputType[P]>
      }
    >
  >



export type WebAccessWhereInput = {
  AND?: Prisma.WebAccessWhereInput | Prisma.WebAccessWhereInput[]
  OR?: Prisma.WebAccessWhereInput[]
  NOT?: Prisma.WebAccessWhereInput | Prisma.WebAccessWhereInput[]
  id?: Prisma.IntFilter<"WebAccess"> | number
  createdAt?: Prisma.DateTimeFilter<"WebAccess"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WebAccess"> | Date | string
  email?: Prisma.StringFilter<"WebAccess"> | string
  webId?: Prisma.IntFilter<"WebAccess"> | number
  role?: Prisma.EnumWebRoleFilter<"WebAccess"> | $Enums.WebRole
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  web?: Prisma.XOR<Prisma.WebScalarRelationFilter, Prisma.WebWhereInput>
}

export type WebAccessOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
  webId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  web?: Prisma.WebOrderByWithRelationInput
}

export type WebAccessWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  user_web_access?: Prisma.WebAccessUser_web_accessCompoundUniqueInput
  AND?: Prisma.WebAccessWhereInput | Prisma.WebAccessWhereInput[]
  OR?: Prisma.WebAccessWhereInput[]
  NOT?: Prisma.WebAccessWhereInput | Prisma.WebAccessWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"WebAccess"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WebAccess"> | Date | string
  email?: Prisma.StringFilter<"WebAccess"> | string
  webId?: Prisma.IntFilter<"WebAccess"> | number
  role?: Prisma.EnumWebRoleFilter<"WebAccess"> | $Enums.WebRole
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  web?: Prisma.XOR<Prisma.WebScalarRelationFilter, Prisma.WebWhereInput>
}, "id" | "user_web_access">

export type WebAccessOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
  webId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  _count?: Prisma.WebAccessCountOrderByAggregateInput
  _avg?: Prisma.WebAccessAvgOrderByAggregateInput
  _max?: Prisma.WebAccessMaxOrderByAggregateInput
  _min?: Prisma.WebAccessMinOrderByAggregateInput
  _sum?: Prisma.WebAccessSumOrderByAggregateInput
}

export type WebAccessScalarWhereWithAggregatesInput = {
  AND?: Prisma.WebAccessScalarWhereWithAggregatesInput | Prisma.WebAccessScalarWhereWithAggregatesInput[]
  OR?: Prisma.WebAccessScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WebAccessScalarWhereWithAggregatesInput | Prisma.WebAccessScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"WebAccess"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WebAccess"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WebAccess"> | Date | string
  email?: Prisma.StringWithAggregatesFilter<"WebAccess"> | string
  webId?: Prisma.IntWithAggregatesFilter<"WebAccess"> | number
  role?: Prisma.EnumWebRoleWithAggregatesFilter<"WebAccess"> | $Enums.WebRole
}

export type WebAccessCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  role?: $Enums.WebRole
  user?: Prisma.UserCreateNestedOneWithoutWebAccessInput
  web: Prisma.WebCreateNestedOneWithoutWebAccessInput
}

export type WebAccessUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  webId: number
  role?: $Enums.WebRole
}

export type WebAccessUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.EnumWebRoleFieldUpdateOperationsInput | $Enums.WebRole
  user?: Prisma.UserUpdateOneWithoutWebAccessNestedInput
  web?: Prisma.WebUpdateOneRequiredWithoutWebAccessNestedInput
}

export type WebAccessUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  webId?: Prisma.IntFieldUpdateOperationsInput | number
  role?: Prisma.EnumWebRoleFieldUpdateOperationsInput | $Enums.WebRole
}

export type WebAccessCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  webId: number
  role?: $Enums.WebRole
}

export type WebAccessUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.EnumWebRoleFieldUpdateOperationsInput | $Enums.WebRole
}

export type WebAccessUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  webId?: Prisma.IntFieldUpdateOperationsInput | number
  role?: Prisma.EnumWebRoleFieldUpdateOperationsInput | $Enums.WebRole
}

export type WebAccessListRelationFilter = {
  every?: Prisma.WebAccessWhereInput
  some?: Prisma.WebAccessWhereInput
  none?: Prisma.WebAccessWhereInput
}

export type WebAccessOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WebAccessUser_web_accessCompoundUniqueInput = {
  email: string
  webId: number
}

export type WebAccessCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
  webId?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type WebAccessAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  webId?: Prisma.SortOrder
}

export type WebAccessMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
  webId?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type WebAccessMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
  webId?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type WebAccessSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  webId?: Prisma.SortOrder
}

export type WebAccessCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.WebAccessCreateWithoutUserInput, Prisma.WebAccessUncheckedCreateWithoutUserInput> | Prisma.WebAccessCreateWithoutUserInput[] | Prisma.WebAccessUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WebAccessCreateOrConnectWithoutUserInput | Prisma.WebAccessCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.WebAccessCreateManyUserInputEnvelope
  connect?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
}

export type WebAccessUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.WebAccessCreateWithoutUserInput, Prisma.WebAccessUncheckedCreateWithoutUserInput> | Prisma.WebAccessCreateWithoutUserInput[] | Prisma.WebAccessUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WebAccessCreateOrConnectWithoutUserInput | Prisma.WebAccessCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.WebAccessCreateManyUserInputEnvelope
  connect?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
}

export type WebAccessUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.WebAccessCreateWithoutUserInput, Prisma.WebAccessUncheckedCreateWithoutUserInput> | Prisma.WebAccessCreateWithoutUserInput[] | Prisma.WebAccessUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WebAccessCreateOrConnectWithoutUserInput | Prisma.WebAccessCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.WebAccessUpsertWithWhereUniqueWithoutUserInput | Prisma.WebAccessUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.WebAccessCreateManyUserInputEnvelope
  set?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  disconnect?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  delete?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  connect?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  update?: Prisma.WebAccessUpdateWithWhereUniqueWithoutUserInput | Prisma.WebAccessUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.WebAccessUpdateManyWithWhereWithoutUserInput | Prisma.WebAccessUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.WebAccessScalarWhereInput | Prisma.WebAccessScalarWhereInput[]
}

export type WebAccessUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.WebAccessCreateWithoutUserInput, Prisma.WebAccessUncheckedCreateWithoutUserInput> | Prisma.WebAccessCreateWithoutUserInput[] | Prisma.WebAccessUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WebAccessCreateOrConnectWithoutUserInput | Prisma.WebAccessCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.WebAccessUpsertWithWhereUniqueWithoutUserInput | Prisma.WebAccessUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.WebAccessCreateManyUserInputEnvelope
  set?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  disconnect?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  delete?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  connect?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  update?: Prisma.WebAccessUpdateWithWhereUniqueWithoutUserInput | Prisma.WebAccessUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.WebAccessUpdateManyWithWhereWithoutUserInput | Prisma.WebAccessUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.WebAccessScalarWhereInput | Prisma.WebAccessScalarWhereInput[]
}

export type WebAccessCreateNestedManyWithoutWebInput = {
  create?: Prisma.XOR<Prisma.WebAccessCreateWithoutWebInput, Prisma.WebAccessUncheckedCreateWithoutWebInput> | Prisma.WebAccessCreateWithoutWebInput[] | Prisma.WebAccessUncheckedCreateWithoutWebInput[]
  connectOrCreate?: Prisma.WebAccessCreateOrConnectWithoutWebInput | Prisma.WebAccessCreateOrConnectWithoutWebInput[]
  createMany?: Prisma.WebAccessCreateManyWebInputEnvelope
  connect?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
}

export type WebAccessUncheckedCreateNestedManyWithoutWebInput = {
  create?: Prisma.XOR<Prisma.WebAccessCreateWithoutWebInput, Prisma.WebAccessUncheckedCreateWithoutWebInput> | Prisma.WebAccessCreateWithoutWebInput[] | Prisma.WebAccessUncheckedCreateWithoutWebInput[]
  connectOrCreate?: Prisma.WebAccessCreateOrConnectWithoutWebInput | Prisma.WebAccessCreateOrConnectWithoutWebInput[]
  createMany?: Prisma.WebAccessCreateManyWebInputEnvelope
  connect?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
}

export type WebAccessUpdateManyWithoutWebNestedInput = {
  create?: Prisma.XOR<Prisma.WebAccessCreateWithoutWebInput, Prisma.WebAccessUncheckedCreateWithoutWebInput> | Prisma.WebAccessCreateWithoutWebInput[] | Prisma.WebAccessUncheckedCreateWithoutWebInput[]
  connectOrCreate?: Prisma.WebAccessCreateOrConnectWithoutWebInput | Prisma.WebAccessCreateOrConnectWithoutWebInput[]
  upsert?: Prisma.WebAccessUpsertWithWhereUniqueWithoutWebInput | Prisma.WebAccessUpsertWithWhereUniqueWithoutWebInput[]
  createMany?: Prisma.WebAccessCreateManyWebInputEnvelope
  set?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  disconnect?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  delete?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  connect?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  update?: Prisma.WebAccessUpdateWithWhereUniqueWithoutWebInput | Prisma.WebAccessUpdateWithWhereUniqueWithoutWebInput[]
  updateMany?: Prisma.WebAccessUpdateManyWithWhereWithoutWebInput | Prisma.WebAccessUpdateManyWithWhereWithoutWebInput[]
  deleteMany?: Prisma.WebAccessScalarWhereInput | Prisma.WebAccessScalarWhereInput[]
}

export type WebAccessUncheckedUpdateManyWithoutWebNestedInput = {
  create?: Prisma.XOR<Prisma.WebAccessCreateWithoutWebInput, Prisma.WebAccessUncheckedCreateWithoutWebInput> | Prisma.WebAccessCreateWithoutWebInput[] | Prisma.WebAccessUncheckedCreateWithoutWebInput[]
  connectOrCreate?: Prisma.WebAccessCreateOrConnectWithoutWebInput | Prisma.WebAccessCreateOrConnectWithoutWebInput[]
  upsert?: Prisma.WebAccessUpsertWithWhereUniqueWithoutWebInput | Prisma.WebAccessUpsertWithWhereUniqueWithoutWebInput[]
  createMany?: Prisma.WebAccessCreateManyWebInputEnvelope
  set?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  disconnect?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  delete?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  connect?: Prisma.WebAccessWhereUniqueInput | Prisma.WebAccessWhereUniqueInput[]
  update?: Prisma.WebAccessUpdateWithWhereUniqueWithoutWebInput | Prisma.WebAccessUpdateWithWhereUniqueWithoutWebInput[]
  updateMany?: Prisma.WebAccessUpdateManyWithWhereWithoutWebInput | Prisma.WebAccessUpdateManyWithWhereWithoutWebInput[]
  deleteMany?: Prisma.WebAccessScalarWhereInput | Prisma.WebAccessScalarWhereInput[]
}

export type EnumWebRoleFieldUpdateOperationsInput = {
  set?: $Enums.WebRole
}

export type WebAccessCreateWithoutUserInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  role?: $Enums.WebRole
  web: Prisma.WebCreateNestedOneWithoutWebAccessInput
}

export type WebAccessUncheckedCreateWithoutUserInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  webId: number
  role?: $Enums.WebRole
}

export type WebAccessCreateOrConnectWithoutUserInput = {
  where: Prisma.WebAccessWhereUniqueInput
  create: Prisma.XOR<Prisma.WebAccessCreateWithoutUserInput, Prisma.WebAccessUncheckedCreateWithoutUserInput>
}

export type WebAccessCreateManyUserInputEnvelope = {
  data: Prisma.WebAccessCreateManyUserInput | Prisma.WebAccessCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type WebAccessUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.WebAccessWhereUniqueInput
  update: Prisma.XOR<Prisma.WebAccessUpdateWithoutUserInput, Prisma.WebAccessUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.WebAccessCreateWithoutUserInput, Prisma.WebAccessUncheckedCreateWithoutUserInput>
}

export type WebAccessUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.WebAccessWhereUniqueInput
  data: Prisma.XOR<Prisma.WebAccessUpdateWithoutUserInput, Prisma.WebAccessUncheckedUpdateWithoutUserInput>
}

export type WebAccessUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.WebAccessScalarWhereInput
  data: Prisma.XOR<Prisma.WebAccessUpdateManyMutationInput, Prisma.WebAccessUncheckedUpdateManyWithoutUserInput>
}

export type WebAccessScalarWhereInput = {
  AND?: Prisma.WebAccessScalarWhereInput | Prisma.WebAccessScalarWhereInput[]
  OR?: Prisma.WebAccessScalarWhereInput[]
  NOT?: Prisma.WebAccessScalarWhereInput | Prisma.WebAccessScalarWhereInput[]
  id?: Prisma.IntFilter<"WebAccess"> | number
  createdAt?: Prisma.DateTimeFilter<"WebAccess"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WebAccess"> | Date | string
  email?: Prisma.StringFilter<"WebAccess"> | string
  webId?: Prisma.IntFilter<"WebAccess"> | number
  role?: Prisma.EnumWebRoleFilter<"WebAccess"> | $Enums.WebRole
}

export type WebAccessCreateWithoutWebInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  role?: $Enums.WebRole
  user?: Prisma.UserCreateNestedOneWithoutWebAccessInput
}

export type WebAccessUncheckedCreateWithoutWebInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  role?: $Enums.WebRole
}

export type WebAccessCreateOrConnectWithoutWebInput = {
  where: Prisma.WebAccessWhereUniqueInput
  create: Prisma.XOR<Prisma.WebAccessCreateWithoutWebInput, Prisma.WebAccessUncheckedCreateWithoutWebInput>
}

export type WebAccessCreateManyWebInputEnvelope = {
  data: Prisma.WebAccessCreateManyWebInput | Prisma.WebAccessCreateManyWebInput[]
  skipDuplicates?: boolean
}

export type WebAccessUpsertWithWhereUniqueWithoutWebInput = {
  where: Prisma.WebAccessWhereUniqueInput
  update: Prisma.XOR<Prisma.WebAccessUpdateWithoutWebInput, Prisma.WebAccessUncheckedUpdateWithoutWebInput>
  create: Prisma.XOR<Prisma.WebAccessCreateWithoutWebInput, Prisma.WebAccessUncheckedCreateWithoutWebInput>
}

export type WebAccessUpdateWithWhereUniqueWithoutWebInput = {
  where: Prisma.WebAccessWhereUniqueInput
  data: Prisma.XOR<Prisma.WebAccessUpdateWithoutWebInput, Prisma.WebAccessUncheckedUpdateWithoutWebInput>
}

export type WebAccessUpdateManyWithWhereWithoutWebInput = {
  where: Prisma.WebAccessScalarWhereInput
  data: Prisma.XOR<Prisma.WebAccessUpdateManyMutationInput, Prisma.WebAccessUncheckedUpdateManyWithoutWebInput>
}

export type WebAccessCreateManyUserInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  webId: number
  role?: $Enums.WebRole
}

export type WebAccessUpdateWithoutUserInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.EnumWebRoleFieldUpdateOperationsInput | $Enums.WebRole
  web?: Prisma.WebUpdateOneRequiredWithoutWebAccessNestedInput
}

export type WebAccessUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  webId?: Prisma.IntFieldUpdateOperationsInput | number
  role?: Prisma.EnumWebRoleFieldUpdateOperationsInput | $Enums.WebRole
}

export type WebAccessUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  webId?: Prisma.IntFieldUpdateOperationsInput | number
  role?: Prisma.EnumWebRoleFieldUpdateOperationsInput | $Enums.WebRole
}

export type WebAccessCreateManyWebInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  role?: $Enums.WebRole
}

export type WebAccessUpdateWithoutWebInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.EnumWebRoleFieldUpdateOperationsInput | $Enums.WebRole
  user?: Prisma.UserUpdateOneWithoutWebAccessNestedInput
}

export type WebAccessUncheckedUpdateWithoutWebInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumWebRoleFieldUpdateOperationsInput | $Enums.WebRole
}

export type WebAccessUncheckedUpdateManyWithoutWebInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumWebRoleFieldUpdateOperationsInput | $Enums.WebRole
}



export type WebAccessSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  webId?: boolean
  role?: boolean
  user?: boolean | Prisma.WebAccess$userArgs<ExtArgs>
  web?: boolean | Prisma.WebDefaultArgs<ExtArgs>
}, ExtArgs["result"]["webAccess"]>

export type WebAccessSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  webId?: boolean
  role?: boolean
  user?: boolean | Prisma.WebAccess$userArgs<ExtArgs>
  web?: boolean | Prisma.WebDefaultArgs<ExtArgs>
}, ExtArgs["result"]["webAccess"]>

export type WebAccessSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  webId?: boolean
  role?: boolean
  user?: boolean | Prisma.WebAccess$userArgs<ExtArgs>
  web?: boolean | Prisma.WebDefaultArgs<ExtArgs>
}, ExtArgs["result"]["webAccess"]>

export type WebAccessSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  webId?: boolean
  role?: boolean
}

export type WebAccessOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "email" | "webId" | "role", ExtArgs["result"]["webAccess"]>
export type WebAccessInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.WebAccess$userArgs<ExtArgs>
  web?: boolean | Prisma.WebDefaultArgs<ExtArgs>
}
export type WebAccessIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.WebAccess$userArgs<ExtArgs>
  web?: boolean | Prisma.WebDefaultArgs<ExtArgs>
}
export type WebAccessIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.WebAccess$userArgs<ExtArgs>
  web?: boolean | Prisma.WebDefaultArgs<ExtArgs>
}

export type $WebAccessPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WebAccess"
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null
    web: Prisma.$WebPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    email: string
    webId: number
    role: $Enums.WebRole
  }, ExtArgs["result"]["webAccess"]>
  composites: {}
}

export type WebAccessGetPayload<S extends boolean | null | undefined | WebAccessDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WebAccessPayload, S>

export type WebAccessCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WebAccessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WebAccessCountAggregateInputType | true
  }

export interface WebAccessDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebAccess'], meta: { name: 'WebAccess' } }
  /**
   * Find zero or one WebAccess that matches the filter.
   * @param {WebAccessFindUniqueArgs} args - Arguments to find a WebAccess
   * @example
   * // Get one WebAccess
   * const webAccess = await prisma.webAccess.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WebAccessFindUniqueArgs>(args: Prisma.SelectSubset<T, WebAccessFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WebAccessClient<runtime.Types.Result.GetResult<Prisma.$WebAccessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WebAccess that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WebAccessFindUniqueOrThrowArgs} args - Arguments to find a WebAccess
   * @example
   * // Get one WebAccess
   * const webAccess = await prisma.webAccess.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WebAccessFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WebAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WebAccessClient<runtime.Types.Result.GetResult<Prisma.$WebAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WebAccess that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebAccessFindFirstArgs} args - Arguments to find a WebAccess
   * @example
   * // Get one WebAccess
   * const webAccess = await prisma.webAccess.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WebAccessFindFirstArgs>(args?: Prisma.SelectSubset<T, WebAccessFindFirstArgs<ExtArgs>>): Prisma.Prisma__WebAccessClient<runtime.Types.Result.GetResult<Prisma.$WebAccessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WebAccess that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebAccessFindFirstOrThrowArgs} args - Arguments to find a WebAccess
   * @example
   * // Get one WebAccess
   * const webAccess = await prisma.webAccess.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WebAccessFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WebAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WebAccessClient<runtime.Types.Result.GetResult<Prisma.$WebAccessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WebAccesses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebAccessFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WebAccesses
   * const webAccesses = await prisma.webAccess.findMany()
   * 
   * // Get first 10 WebAccesses
   * const webAccesses = await prisma.webAccess.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const webAccessWithIdOnly = await prisma.webAccess.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WebAccessFindManyArgs>(args?: Prisma.SelectSubset<T, WebAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WebAccess.
   * @param {WebAccessCreateArgs} args - Arguments to create a WebAccess.
   * @example
   * // Create one WebAccess
   * const WebAccess = await prisma.webAccess.create({
   *   data: {
   *     // ... data to create a WebAccess
   *   }
   * })
   * 
   */
  create<T extends WebAccessCreateArgs>(args: Prisma.SelectSubset<T, WebAccessCreateArgs<ExtArgs>>): Prisma.Prisma__WebAccessClient<runtime.Types.Result.GetResult<Prisma.$WebAccessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WebAccesses.
   * @param {WebAccessCreateManyArgs} args - Arguments to create many WebAccesses.
   * @example
   * // Create many WebAccesses
   * const webAccess = await prisma.webAccess.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WebAccessCreateManyArgs>(args?: Prisma.SelectSubset<T, WebAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WebAccesses and returns the data saved in the database.
   * @param {WebAccessCreateManyAndReturnArgs} args - Arguments to create many WebAccesses.
   * @example
   * // Create many WebAccesses
   * const webAccess = await prisma.webAccess.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WebAccesses and only return the `id`
   * const webAccessWithIdOnly = await prisma.webAccess.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WebAccessCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WebAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebAccessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WebAccess.
   * @param {WebAccessDeleteArgs} args - Arguments to delete one WebAccess.
   * @example
   * // Delete one WebAccess
   * const WebAccess = await prisma.webAccess.delete({
   *   where: {
   *     // ... filter to delete one WebAccess
   *   }
   * })
   * 
   */
  delete<T extends WebAccessDeleteArgs>(args: Prisma.SelectSubset<T, WebAccessDeleteArgs<ExtArgs>>): Prisma.Prisma__WebAccessClient<runtime.Types.Result.GetResult<Prisma.$WebAccessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WebAccess.
   * @param {WebAccessUpdateArgs} args - Arguments to update one WebAccess.
   * @example
   * // Update one WebAccess
   * const webAccess = await prisma.webAccess.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WebAccessUpdateArgs>(args: Prisma.SelectSubset<T, WebAccessUpdateArgs<ExtArgs>>): Prisma.Prisma__WebAccessClient<runtime.Types.Result.GetResult<Prisma.$WebAccessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WebAccesses.
   * @param {WebAccessDeleteManyArgs} args - Arguments to filter WebAccesses to delete.
   * @example
   * // Delete a few WebAccesses
   * const { count } = await prisma.webAccess.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WebAccessDeleteManyArgs>(args?: Prisma.SelectSubset<T, WebAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WebAccesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebAccessUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WebAccesses
   * const webAccess = await prisma.webAccess.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WebAccessUpdateManyArgs>(args: Prisma.SelectSubset<T, WebAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WebAccesses and returns the data updated in the database.
   * @param {WebAccessUpdateManyAndReturnArgs} args - Arguments to update many WebAccesses.
   * @example
   * // Update many WebAccesses
   * const webAccess = await prisma.webAccess.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WebAccesses and only return the `id`
   * const webAccessWithIdOnly = await prisma.webAccess.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WebAccessUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WebAccessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebAccessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WebAccess.
   * @param {WebAccessUpsertArgs} args - Arguments to update or create a WebAccess.
   * @example
   * // Update or create a WebAccess
   * const webAccess = await prisma.webAccess.upsert({
   *   create: {
   *     // ... data to create a WebAccess
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WebAccess we want to update
   *   }
   * })
   */
  upsert<T extends WebAccessUpsertArgs>(args: Prisma.SelectSubset<T, WebAccessUpsertArgs<ExtArgs>>): Prisma.Prisma__WebAccessClient<runtime.Types.Result.GetResult<Prisma.$WebAccessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WebAccesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebAccessCountArgs} args - Arguments to filter WebAccesses to count.
   * @example
   * // Count the number of WebAccesses
   * const count = await prisma.webAccess.count({
   *   where: {
   *     // ... the filter for the WebAccesses we want to count
   *   }
   * })
  **/
  count<T extends WebAccessCountArgs>(
    args?: Prisma.Subset<T, WebAccessCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WebAccessCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WebAccess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WebAccessAggregateArgs>(args: Prisma.Subset<T, WebAccessAggregateArgs>): Prisma.PrismaPromise<GetWebAccessAggregateType<T>>

  /**
   * Group by WebAccess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebAccessGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WebAccessGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WebAccessGroupByArgs['orderBy'] }
      : { orderBy?: WebAccessGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WebAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WebAccess model
 */
readonly fields: WebAccessFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WebAccess.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WebAccessClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.WebAccess$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WebAccess$userArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  web<T extends Prisma.WebDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WebDefaultArgs<ExtArgs>>): Prisma.Prisma__WebClient<runtime.Types.Result.GetResult<Prisma.$WebPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WebAccess model
 */
export interface WebAccessFieldRefs {
  readonly id: Prisma.FieldRef<"WebAccess", 'Int'>
  readonly createdAt: Prisma.FieldRef<"WebAccess", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WebAccess", 'DateTime'>
  readonly email: Prisma.FieldRef<"WebAccess", 'String'>
  readonly webId: Prisma.FieldRef<"WebAccess", 'Int'>
  readonly role: Prisma.FieldRef<"WebAccess", 'WebRole'>
}
    

// Custom InputTypes
/**
 * WebAccess findUnique
 */
export type WebAccessFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebAccess
   */
  select?: Prisma.WebAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebAccess
   */
  omit?: Prisma.WebAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebAccessInclude<ExtArgs> | null
  /**
   * Filter, which WebAccess to fetch.
   */
  where: Prisma.WebAccessWhereUniqueInput
}

/**
 * WebAccess findUniqueOrThrow
 */
export type WebAccessFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebAccess
   */
  select?: Prisma.WebAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebAccess
   */
  omit?: Prisma.WebAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebAccessInclude<ExtArgs> | null
  /**
   * Filter, which WebAccess to fetch.
   */
  where: Prisma.WebAccessWhereUniqueInput
}

/**
 * WebAccess findFirst
 */
export type WebAccessFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebAccess
   */
  select?: Prisma.WebAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebAccess
   */
  omit?: Prisma.WebAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebAccessInclude<ExtArgs> | null
  /**
   * Filter, which WebAccess to fetch.
   */
  where?: Prisma.WebAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebAccesses to fetch.
   */
  orderBy?: Prisma.WebAccessOrderByWithRelationInput | Prisma.WebAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WebAccesses.
   */
  cursor?: Prisma.WebAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WebAccesses.
   */
  distinct?: Prisma.WebAccessScalarFieldEnum | Prisma.WebAccessScalarFieldEnum[]
}

/**
 * WebAccess findFirstOrThrow
 */
export type WebAccessFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebAccess
   */
  select?: Prisma.WebAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebAccess
   */
  omit?: Prisma.WebAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebAccessInclude<ExtArgs> | null
  /**
   * Filter, which WebAccess to fetch.
   */
  where?: Prisma.WebAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebAccesses to fetch.
   */
  orderBy?: Prisma.WebAccessOrderByWithRelationInput | Prisma.WebAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WebAccesses.
   */
  cursor?: Prisma.WebAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WebAccesses.
   */
  distinct?: Prisma.WebAccessScalarFieldEnum | Prisma.WebAccessScalarFieldEnum[]
}

/**
 * WebAccess findMany
 */
export type WebAccessFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebAccess
   */
  select?: Prisma.WebAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebAccess
   */
  omit?: Prisma.WebAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebAccessInclude<ExtArgs> | null
  /**
   * Filter, which WebAccesses to fetch.
   */
  where?: Prisma.WebAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebAccesses to fetch.
   */
  orderBy?: Prisma.WebAccessOrderByWithRelationInput | Prisma.WebAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WebAccesses.
   */
  cursor?: Prisma.WebAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebAccesses.
   */
  skip?: number
  distinct?: Prisma.WebAccessScalarFieldEnum | Prisma.WebAccessScalarFieldEnum[]
}

/**
 * WebAccess create
 */
export type WebAccessCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebAccess
   */
  select?: Prisma.WebAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebAccess
   */
  omit?: Prisma.WebAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebAccessInclude<ExtArgs> | null
  /**
   * The data needed to create a WebAccess.
   */
  data: Prisma.XOR<Prisma.WebAccessCreateInput, Prisma.WebAccessUncheckedCreateInput>
}

/**
 * WebAccess createMany
 */
export type WebAccessCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WebAccesses.
   */
  data: Prisma.WebAccessCreateManyInput | Prisma.WebAccessCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WebAccess createManyAndReturn
 */
export type WebAccessCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebAccess
   */
  select?: Prisma.WebAccessSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WebAccess
   */
  omit?: Prisma.WebAccessOmit<ExtArgs> | null
  /**
   * The data used to create many WebAccesses.
   */
  data: Prisma.WebAccessCreateManyInput | Prisma.WebAccessCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebAccessIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WebAccess update
 */
export type WebAccessUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebAccess
   */
  select?: Prisma.WebAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebAccess
   */
  omit?: Prisma.WebAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebAccessInclude<ExtArgs> | null
  /**
   * The data needed to update a WebAccess.
   */
  data: Prisma.XOR<Prisma.WebAccessUpdateInput, Prisma.WebAccessUncheckedUpdateInput>
  /**
   * Choose, which WebAccess to update.
   */
  where: Prisma.WebAccessWhereUniqueInput
}

/**
 * WebAccess updateMany
 */
export type WebAccessUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WebAccesses.
   */
  data: Prisma.XOR<Prisma.WebAccessUpdateManyMutationInput, Prisma.WebAccessUncheckedUpdateManyInput>
  /**
   * Filter which WebAccesses to update
   */
  where?: Prisma.WebAccessWhereInput
  /**
   * Limit how many WebAccesses to update.
   */
  limit?: number
}

/**
 * WebAccess updateManyAndReturn
 */
export type WebAccessUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebAccess
   */
  select?: Prisma.WebAccessSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WebAccess
   */
  omit?: Prisma.WebAccessOmit<ExtArgs> | null
  /**
   * The data used to update WebAccesses.
   */
  data: Prisma.XOR<Prisma.WebAccessUpdateManyMutationInput, Prisma.WebAccessUncheckedUpdateManyInput>
  /**
   * Filter which WebAccesses to update
   */
  where?: Prisma.WebAccessWhereInput
  /**
   * Limit how many WebAccesses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebAccessIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WebAccess upsert
 */
export type WebAccessUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebAccess
   */
  select?: Prisma.WebAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebAccess
   */
  omit?: Prisma.WebAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebAccessInclude<ExtArgs> | null
  /**
   * The filter to search for the WebAccess to update in case it exists.
   */
  where: Prisma.WebAccessWhereUniqueInput
  /**
   * In case the WebAccess found by the `where` argument doesn't exist, create a new WebAccess with this data.
   */
  create: Prisma.XOR<Prisma.WebAccessCreateInput, Prisma.WebAccessUncheckedCreateInput>
  /**
   * In case the WebAccess was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WebAccessUpdateInput, Prisma.WebAccessUncheckedUpdateInput>
}

/**
 * WebAccess delete
 */
export type WebAccessDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebAccess
   */
  select?: Prisma.WebAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebAccess
   */
  omit?: Prisma.WebAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebAccessInclude<ExtArgs> | null
  /**
   * Filter which WebAccess to delete.
   */
  where: Prisma.WebAccessWhereUniqueInput
}

/**
 * WebAccess deleteMany
 */
export type WebAccessDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WebAccesses to delete
   */
  where?: Prisma.WebAccessWhereInput
  /**
   * Limit how many WebAccesses to delete.
   */
  limit?: number
}

/**
 * WebAccess.user
 */
export type WebAccess$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * WebAccess without action
 */
export type WebAccessDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebAccess
   */
  select?: Prisma.WebAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebAccess
   */
  omit?: Prisma.WebAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebAccessInclude<ExtArgs> | null
}
