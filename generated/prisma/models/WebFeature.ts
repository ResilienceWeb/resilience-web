
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `WebFeature` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model WebFeature
 * 
 */
export type WebFeatureModel = runtime.Types.Result.DefaultSelection<Prisma.$WebFeaturePayload>

export type AggregateWebFeature = {
  _count: WebFeatureCountAggregateOutputType | null
  _avg: WebFeatureAvgAggregateOutputType | null
  _sum: WebFeatureSumAggregateOutputType | null
  _min: WebFeatureMinAggregateOutputType | null
  _max: WebFeatureMaxAggregateOutputType | null
}

export type WebFeatureAvgAggregateOutputType = {
  id: number | null
  webId: number | null
}

export type WebFeatureSumAggregateOutputType = {
  id: number | null
  webId: number | null
}

export type WebFeatureMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  webId: number | null
  feature: string | null
  enabled: boolean | null
}

export type WebFeatureMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  webId: number | null
  feature: string | null
  enabled: boolean | null
}

export type WebFeatureCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  webId: number
  feature: number
  enabled: number
  _all: number
}


export type WebFeatureAvgAggregateInputType = {
  id?: true
  webId?: true
}

export type WebFeatureSumAggregateInputType = {
  id?: true
  webId?: true
}

export type WebFeatureMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  webId?: true
  feature?: true
  enabled?: true
}

export type WebFeatureMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  webId?: true
  feature?: true
  enabled?: true
}

export type WebFeatureCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  webId?: true
  feature?: true
  enabled?: true
  _all?: true
}

export type WebFeatureAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WebFeature to aggregate.
   */
  where?: Prisma.WebFeatureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebFeatures to fetch.
   */
  orderBy?: Prisma.WebFeatureOrderByWithRelationInput | Prisma.WebFeatureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WebFeatureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebFeatures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebFeatures.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WebFeatures
  **/
  _count?: true | WebFeatureCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WebFeatureAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WebFeatureSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WebFeatureMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WebFeatureMaxAggregateInputType
}

export type GetWebFeatureAggregateType<T extends WebFeatureAggregateArgs> = {
      [P in keyof T & keyof AggregateWebFeature]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWebFeature[P]>
    : Prisma.GetScalarType<T[P], AggregateWebFeature[P]>
}




export type WebFeatureGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WebFeatureWhereInput
  orderBy?: Prisma.WebFeatureOrderByWithAggregationInput | Prisma.WebFeatureOrderByWithAggregationInput[]
  by: Prisma.WebFeatureScalarFieldEnum[] | Prisma.WebFeatureScalarFieldEnum
  having?: Prisma.WebFeatureScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WebFeatureCountAggregateInputType | true
  _avg?: WebFeatureAvgAggregateInputType
  _sum?: WebFeatureSumAggregateInputType
  _min?: WebFeatureMinAggregateInputType
  _max?: WebFeatureMaxAggregateInputType
}

export type WebFeatureGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  webId: number
  feature: string
  enabled: boolean
  _count: WebFeatureCountAggregateOutputType | null
  _avg: WebFeatureAvgAggregateOutputType | null
  _sum: WebFeatureSumAggregateOutputType | null
  _min: WebFeatureMinAggregateOutputType | null
  _max: WebFeatureMaxAggregateOutputType | null
}

type GetWebFeatureGroupByPayload<T extends WebFeatureGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WebFeatureGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WebFeatureGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WebFeatureGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WebFeatureGroupByOutputType[P]>
      }
    >
  >



export type WebFeatureWhereInput = {
  AND?: Prisma.WebFeatureWhereInput | Prisma.WebFeatureWhereInput[]
  OR?: Prisma.WebFeatureWhereInput[]
  NOT?: Prisma.WebFeatureWhereInput | Prisma.WebFeatureWhereInput[]
  id?: Prisma.IntFilter<"WebFeature"> | number
  createdAt?: Prisma.DateTimeFilter<"WebFeature"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WebFeature"> | Date | string
  webId?: Prisma.IntFilter<"WebFeature"> | number
  feature?: Prisma.StringFilter<"WebFeature"> | string
  enabled?: Prisma.BoolFilter<"WebFeature"> | boolean
  web?: Prisma.XOR<Prisma.WebScalarRelationFilter, Prisma.WebWhereInput>
}

export type WebFeatureOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  webId?: Prisma.SortOrder
  feature?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
  web?: Prisma.WebOrderByWithRelationInput
}

export type WebFeatureWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  webId_feature?: Prisma.WebFeatureWebIdFeatureCompoundUniqueInput
  AND?: Prisma.WebFeatureWhereInput | Prisma.WebFeatureWhereInput[]
  OR?: Prisma.WebFeatureWhereInput[]
  NOT?: Prisma.WebFeatureWhereInput | Prisma.WebFeatureWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"WebFeature"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WebFeature"> | Date | string
  webId?: Prisma.IntFilter<"WebFeature"> | number
  feature?: Prisma.StringFilter<"WebFeature"> | string
  enabled?: Prisma.BoolFilter<"WebFeature"> | boolean
  web?: Prisma.XOR<Prisma.WebScalarRelationFilter, Prisma.WebWhereInput>
}, "id" | "webId_feature">

export type WebFeatureOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  webId?: Prisma.SortOrder
  feature?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
  _count?: Prisma.WebFeatureCountOrderByAggregateInput
  _avg?: Prisma.WebFeatureAvgOrderByAggregateInput
  _max?: Prisma.WebFeatureMaxOrderByAggregateInput
  _min?: Prisma.WebFeatureMinOrderByAggregateInput
  _sum?: Prisma.WebFeatureSumOrderByAggregateInput
}

export type WebFeatureScalarWhereWithAggregatesInput = {
  AND?: Prisma.WebFeatureScalarWhereWithAggregatesInput | Prisma.WebFeatureScalarWhereWithAggregatesInput[]
  OR?: Prisma.WebFeatureScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WebFeatureScalarWhereWithAggregatesInput | Prisma.WebFeatureScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"WebFeature"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WebFeature"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WebFeature"> | Date | string
  webId?: Prisma.IntWithAggregatesFilter<"WebFeature"> | number
  feature?: Prisma.StringWithAggregatesFilter<"WebFeature"> | string
  enabled?: Prisma.BoolWithAggregatesFilter<"WebFeature"> | boolean
}

export type WebFeatureCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  feature: string
  enabled?: boolean
  web: Prisma.WebCreateNestedOneWithoutFeaturesInput
}

export type WebFeatureUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  webId: number
  feature: string
  enabled?: boolean
}

export type WebFeatureUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  feature?: Prisma.StringFieldUpdateOperationsInput | string
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  web?: Prisma.WebUpdateOneRequiredWithoutFeaturesNestedInput
}

export type WebFeatureUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  webId?: Prisma.IntFieldUpdateOperationsInput | number
  feature?: Prisma.StringFieldUpdateOperationsInput | string
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WebFeatureCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  webId: number
  feature: string
  enabled?: boolean
}

export type WebFeatureUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  feature?: Prisma.StringFieldUpdateOperationsInput | string
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WebFeatureUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  webId?: Prisma.IntFieldUpdateOperationsInput | number
  feature?: Prisma.StringFieldUpdateOperationsInput | string
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WebFeatureListRelationFilter = {
  every?: Prisma.WebFeatureWhereInput
  some?: Prisma.WebFeatureWhereInput
  none?: Prisma.WebFeatureWhereInput
}

export type WebFeatureOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WebFeatureWebIdFeatureCompoundUniqueInput = {
  webId: number
  feature: string
}

export type WebFeatureCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  webId?: Prisma.SortOrder
  feature?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
}

export type WebFeatureAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  webId?: Prisma.SortOrder
}

export type WebFeatureMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  webId?: Prisma.SortOrder
  feature?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
}

export type WebFeatureMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  webId?: Prisma.SortOrder
  feature?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
}

export type WebFeatureSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  webId?: Prisma.SortOrder
}

export type WebFeatureCreateNestedManyWithoutWebInput = {
  create?: Prisma.XOR<Prisma.WebFeatureCreateWithoutWebInput, Prisma.WebFeatureUncheckedCreateWithoutWebInput> | Prisma.WebFeatureCreateWithoutWebInput[] | Prisma.WebFeatureUncheckedCreateWithoutWebInput[]
  connectOrCreate?: Prisma.WebFeatureCreateOrConnectWithoutWebInput | Prisma.WebFeatureCreateOrConnectWithoutWebInput[]
  createMany?: Prisma.WebFeatureCreateManyWebInputEnvelope
  connect?: Prisma.WebFeatureWhereUniqueInput | Prisma.WebFeatureWhereUniqueInput[]
}

export type WebFeatureUncheckedCreateNestedManyWithoutWebInput = {
  create?: Prisma.XOR<Prisma.WebFeatureCreateWithoutWebInput, Prisma.WebFeatureUncheckedCreateWithoutWebInput> | Prisma.WebFeatureCreateWithoutWebInput[] | Prisma.WebFeatureUncheckedCreateWithoutWebInput[]
  connectOrCreate?: Prisma.WebFeatureCreateOrConnectWithoutWebInput | Prisma.WebFeatureCreateOrConnectWithoutWebInput[]
  createMany?: Prisma.WebFeatureCreateManyWebInputEnvelope
  connect?: Prisma.WebFeatureWhereUniqueInput | Prisma.WebFeatureWhereUniqueInput[]
}

export type WebFeatureUpdateManyWithoutWebNestedInput = {
  create?: Prisma.XOR<Prisma.WebFeatureCreateWithoutWebInput, Prisma.WebFeatureUncheckedCreateWithoutWebInput> | Prisma.WebFeatureCreateWithoutWebInput[] | Prisma.WebFeatureUncheckedCreateWithoutWebInput[]
  connectOrCreate?: Prisma.WebFeatureCreateOrConnectWithoutWebInput | Prisma.WebFeatureCreateOrConnectWithoutWebInput[]
  upsert?: Prisma.WebFeatureUpsertWithWhereUniqueWithoutWebInput | Prisma.WebFeatureUpsertWithWhereUniqueWithoutWebInput[]
  createMany?: Prisma.WebFeatureCreateManyWebInputEnvelope
  set?: Prisma.WebFeatureWhereUniqueInput | Prisma.WebFeatureWhereUniqueInput[]
  disconnect?: Prisma.WebFeatureWhereUniqueInput | Prisma.WebFeatureWhereUniqueInput[]
  delete?: Prisma.WebFeatureWhereUniqueInput | Prisma.WebFeatureWhereUniqueInput[]
  connect?: Prisma.WebFeatureWhereUniqueInput | Prisma.WebFeatureWhereUniqueInput[]
  update?: Prisma.WebFeatureUpdateWithWhereUniqueWithoutWebInput | Prisma.WebFeatureUpdateWithWhereUniqueWithoutWebInput[]
  updateMany?: Prisma.WebFeatureUpdateManyWithWhereWithoutWebInput | Prisma.WebFeatureUpdateManyWithWhereWithoutWebInput[]
  deleteMany?: Prisma.WebFeatureScalarWhereInput | Prisma.WebFeatureScalarWhereInput[]
}

export type WebFeatureUncheckedUpdateManyWithoutWebNestedInput = {
  create?: Prisma.XOR<Prisma.WebFeatureCreateWithoutWebInput, Prisma.WebFeatureUncheckedCreateWithoutWebInput> | Prisma.WebFeatureCreateWithoutWebInput[] | Prisma.WebFeatureUncheckedCreateWithoutWebInput[]
  connectOrCreate?: Prisma.WebFeatureCreateOrConnectWithoutWebInput | Prisma.WebFeatureCreateOrConnectWithoutWebInput[]
  upsert?: Prisma.WebFeatureUpsertWithWhereUniqueWithoutWebInput | Prisma.WebFeatureUpsertWithWhereUniqueWithoutWebInput[]
  createMany?: Prisma.WebFeatureCreateManyWebInputEnvelope
  set?: Prisma.WebFeatureWhereUniqueInput | Prisma.WebFeatureWhereUniqueInput[]
  disconnect?: Prisma.WebFeatureWhereUniqueInput | Prisma.WebFeatureWhereUniqueInput[]
  delete?: Prisma.WebFeatureWhereUniqueInput | Prisma.WebFeatureWhereUniqueInput[]
  connect?: Prisma.WebFeatureWhereUniqueInput | Prisma.WebFeatureWhereUniqueInput[]
  update?: Prisma.WebFeatureUpdateWithWhereUniqueWithoutWebInput | Prisma.WebFeatureUpdateWithWhereUniqueWithoutWebInput[]
  updateMany?: Prisma.WebFeatureUpdateManyWithWhereWithoutWebInput | Prisma.WebFeatureUpdateManyWithWhereWithoutWebInput[]
  deleteMany?: Prisma.WebFeatureScalarWhereInput | Prisma.WebFeatureScalarWhereInput[]
}

export type WebFeatureCreateWithoutWebInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  feature: string
  enabled?: boolean
}

export type WebFeatureUncheckedCreateWithoutWebInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  feature: string
  enabled?: boolean
}

export type WebFeatureCreateOrConnectWithoutWebInput = {
  where: Prisma.WebFeatureWhereUniqueInput
  create: Prisma.XOR<Prisma.WebFeatureCreateWithoutWebInput, Prisma.WebFeatureUncheckedCreateWithoutWebInput>
}

export type WebFeatureCreateManyWebInputEnvelope = {
  data: Prisma.WebFeatureCreateManyWebInput | Prisma.WebFeatureCreateManyWebInput[]
  skipDuplicates?: boolean
}

export type WebFeatureUpsertWithWhereUniqueWithoutWebInput = {
  where: Prisma.WebFeatureWhereUniqueInput
  update: Prisma.XOR<Prisma.WebFeatureUpdateWithoutWebInput, Prisma.WebFeatureUncheckedUpdateWithoutWebInput>
  create: Prisma.XOR<Prisma.WebFeatureCreateWithoutWebInput, Prisma.WebFeatureUncheckedCreateWithoutWebInput>
}

export type WebFeatureUpdateWithWhereUniqueWithoutWebInput = {
  where: Prisma.WebFeatureWhereUniqueInput
  data: Prisma.XOR<Prisma.WebFeatureUpdateWithoutWebInput, Prisma.WebFeatureUncheckedUpdateWithoutWebInput>
}

export type WebFeatureUpdateManyWithWhereWithoutWebInput = {
  where: Prisma.WebFeatureScalarWhereInput
  data: Prisma.XOR<Prisma.WebFeatureUpdateManyMutationInput, Prisma.WebFeatureUncheckedUpdateManyWithoutWebInput>
}

export type WebFeatureScalarWhereInput = {
  AND?: Prisma.WebFeatureScalarWhereInput | Prisma.WebFeatureScalarWhereInput[]
  OR?: Prisma.WebFeatureScalarWhereInput[]
  NOT?: Prisma.WebFeatureScalarWhereInput | Prisma.WebFeatureScalarWhereInput[]
  id?: Prisma.IntFilter<"WebFeature"> | number
  createdAt?: Prisma.DateTimeFilter<"WebFeature"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WebFeature"> | Date | string
  webId?: Prisma.IntFilter<"WebFeature"> | number
  feature?: Prisma.StringFilter<"WebFeature"> | string
  enabled?: Prisma.BoolFilter<"WebFeature"> | boolean
}

export type WebFeatureCreateManyWebInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  feature: string
  enabled?: boolean
}

export type WebFeatureUpdateWithoutWebInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  feature?: Prisma.StringFieldUpdateOperationsInput | string
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WebFeatureUncheckedUpdateWithoutWebInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  feature?: Prisma.StringFieldUpdateOperationsInput | string
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WebFeatureUncheckedUpdateManyWithoutWebInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  feature?: Prisma.StringFieldUpdateOperationsInput | string
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type WebFeatureSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  webId?: boolean
  feature?: boolean
  enabled?: boolean
  web?: boolean | Prisma.WebDefaultArgs<ExtArgs>
}, ExtArgs["result"]["webFeature"]>

export type WebFeatureSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  webId?: boolean
  feature?: boolean
  enabled?: boolean
  web?: boolean | Prisma.WebDefaultArgs<ExtArgs>
}, ExtArgs["result"]["webFeature"]>

export type WebFeatureSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  webId?: boolean
  feature?: boolean
  enabled?: boolean
  web?: boolean | Prisma.WebDefaultArgs<ExtArgs>
}, ExtArgs["result"]["webFeature"]>

export type WebFeatureSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  webId?: boolean
  feature?: boolean
  enabled?: boolean
}

export type WebFeatureOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "webId" | "feature" | "enabled", ExtArgs["result"]["webFeature"]>
export type WebFeatureInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  web?: boolean | Prisma.WebDefaultArgs<ExtArgs>
}
export type WebFeatureIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  web?: boolean | Prisma.WebDefaultArgs<ExtArgs>
}
export type WebFeatureIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  web?: boolean | Prisma.WebDefaultArgs<ExtArgs>
}

export type $WebFeaturePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WebFeature"
  objects: {
    web: Prisma.$WebPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    webId: number
    feature: string
    enabled: boolean
  }, ExtArgs["result"]["webFeature"]>
  composites: {}
}

export type WebFeatureGetPayload<S extends boolean | null | undefined | WebFeatureDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WebFeaturePayload, S>

export type WebFeatureCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WebFeatureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WebFeatureCountAggregateInputType | true
  }

export interface WebFeatureDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebFeature'], meta: { name: 'WebFeature' } }
  /**
   * Find zero or one WebFeature that matches the filter.
   * @param {WebFeatureFindUniqueArgs} args - Arguments to find a WebFeature
   * @example
   * // Get one WebFeature
   * const webFeature = await prisma.webFeature.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WebFeatureFindUniqueArgs>(args: Prisma.SelectSubset<T, WebFeatureFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WebFeatureClient<runtime.Types.Result.GetResult<Prisma.$WebFeaturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WebFeature that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WebFeatureFindUniqueOrThrowArgs} args - Arguments to find a WebFeature
   * @example
   * // Get one WebFeature
   * const webFeature = await prisma.webFeature.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WebFeatureFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WebFeatureFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WebFeatureClient<runtime.Types.Result.GetResult<Prisma.$WebFeaturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WebFeature that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebFeatureFindFirstArgs} args - Arguments to find a WebFeature
   * @example
   * // Get one WebFeature
   * const webFeature = await prisma.webFeature.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WebFeatureFindFirstArgs>(args?: Prisma.SelectSubset<T, WebFeatureFindFirstArgs<ExtArgs>>): Prisma.Prisma__WebFeatureClient<runtime.Types.Result.GetResult<Prisma.$WebFeaturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WebFeature that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebFeatureFindFirstOrThrowArgs} args - Arguments to find a WebFeature
   * @example
   * // Get one WebFeature
   * const webFeature = await prisma.webFeature.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WebFeatureFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WebFeatureFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WebFeatureClient<runtime.Types.Result.GetResult<Prisma.$WebFeaturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WebFeatures that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebFeatureFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WebFeatures
   * const webFeatures = await prisma.webFeature.findMany()
   * 
   * // Get first 10 WebFeatures
   * const webFeatures = await prisma.webFeature.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const webFeatureWithIdOnly = await prisma.webFeature.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WebFeatureFindManyArgs>(args?: Prisma.SelectSubset<T, WebFeatureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebFeaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WebFeature.
   * @param {WebFeatureCreateArgs} args - Arguments to create a WebFeature.
   * @example
   * // Create one WebFeature
   * const WebFeature = await prisma.webFeature.create({
   *   data: {
   *     // ... data to create a WebFeature
   *   }
   * })
   * 
   */
  create<T extends WebFeatureCreateArgs>(args: Prisma.SelectSubset<T, WebFeatureCreateArgs<ExtArgs>>): Prisma.Prisma__WebFeatureClient<runtime.Types.Result.GetResult<Prisma.$WebFeaturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WebFeatures.
   * @param {WebFeatureCreateManyArgs} args - Arguments to create many WebFeatures.
   * @example
   * // Create many WebFeatures
   * const webFeature = await prisma.webFeature.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WebFeatureCreateManyArgs>(args?: Prisma.SelectSubset<T, WebFeatureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WebFeatures and returns the data saved in the database.
   * @param {WebFeatureCreateManyAndReturnArgs} args - Arguments to create many WebFeatures.
   * @example
   * // Create many WebFeatures
   * const webFeature = await prisma.webFeature.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WebFeatures and only return the `id`
   * const webFeatureWithIdOnly = await prisma.webFeature.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WebFeatureCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WebFeatureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebFeaturePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WebFeature.
   * @param {WebFeatureDeleteArgs} args - Arguments to delete one WebFeature.
   * @example
   * // Delete one WebFeature
   * const WebFeature = await prisma.webFeature.delete({
   *   where: {
   *     // ... filter to delete one WebFeature
   *   }
   * })
   * 
   */
  delete<T extends WebFeatureDeleteArgs>(args: Prisma.SelectSubset<T, WebFeatureDeleteArgs<ExtArgs>>): Prisma.Prisma__WebFeatureClient<runtime.Types.Result.GetResult<Prisma.$WebFeaturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WebFeature.
   * @param {WebFeatureUpdateArgs} args - Arguments to update one WebFeature.
   * @example
   * // Update one WebFeature
   * const webFeature = await prisma.webFeature.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WebFeatureUpdateArgs>(args: Prisma.SelectSubset<T, WebFeatureUpdateArgs<ExtArgs>>): Prisma.Prisma__WebFeatureClient<runtime.Types.Result.GetResult<Prisma.$WebFeaturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WebFeatures.
   * @param {WebFeatureDeleteManyArgs} args - Arguments to filter WebFeatures to delete.
   * @example
   * // Delete a few WebFeatures
   * const { count } = await prisma.webFeature.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WebFeatureDeleteManyArgs>(args?: Prisma.SelectSubset<T, WebFeatureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WebFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebFeatureUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WebFeatures
   * const webFeature = await prisma.webFeature.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WebFeatureUpdateManyArgs>(args: Prisma.SelectSubset<T, WebFeatureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WebFeatures and returns the data updated in the database.
   * @param {WebFeatureUpdateManyAndReturnArgs} args - Arguments to update many WebFeatures.
   * @example
   * // Update many WebFeatures
   * const webFeature = await prisma.webFeature.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WebFeatures and only return the `id`
   * const webFeatureWithIdOnly = await prisma.webFeature.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WebFeatureUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WebFeatureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebFeaturePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WebFeature.
   * @param {WebFeatureUpsertArgs} args - Arguments to update or create a WebFeature.
   * @example
   * // Update or create a WebFeature
   * const webFeature = await prisma.webFeature.upsert({
   *   create: {
   *     // ... data to create a WebFeature
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WebFeature we want to update
   *   }
   * })
   */
  upsert<T extends WebFeatureUpsertArgs>(args: Prisma.SelectSubset<T, WebFeatureUpsertArgs<ExtArgs>>): Prisma.Prisma__WebFeatureClient<runtime.Types.Result.GetResult<Prisma.$WebFeaturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WebFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebFeatureCountArgs} args - Arguments to filter WebFeatures to count.
   * @example
   * // Count the number of WebFeatures
   * const count = await prisma.webFeature.count({
   *   where: {
   *     // ... the filter for the WebFeatures we want to count
   *   }
   * })
  **/
  count<T extends WebFeatureCountArgs>(
    args?: Prisma.Subset<T, WebFeatureCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WebFeatureCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WebFeature.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebFeatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WebFeatureAggregateArgs>(args: Prisma.Subset<T, WebFeatureAggregateArgs>): Prisma.PrismaPromise<GetWebFeatureAggregateType<T>>

  /**
   * Group by WebFeature.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebFeatureGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WebFeatureGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WebFeatureGroupByArgs['orderBy'] }
      : { orderBy?: WebFeatureGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WebFeatureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebFeatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WebFeature model
 */
readonly fields: WebFeatureFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WebFeature.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WebFeatureClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  web<T extends Prisma.WebDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WebDefaultArgs<ExtArgs>>): Prisma.Prisma__WebClient<runtime.Types.Result.GetResult<Prisma.$WebPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WebFeature model
 */
export interface WebFeatureFieldRefs {
  readonly id: Prisma.FieldRef<"WebFeature", 'Int'>
  readonly createdAt: Prisma.FieldRef<"WebFeature", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WebFeature", 'DateTime'>
  readonly webId: Prisma.FieldRef<"WebFeature", 'Int'>
  readonly feature: Prisma.FieldRef<"WebFeature", 'String'>
  readonly enabled: Prisma.FieldRef<"WebFeature", 'Boolean'>
}
    

// Custom InputTypes
/**
 * WebFeature findUnique
 */
export type WebFeatureFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebFeature
   */
  select?: Prisma.WebFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebFeature
   */
  omit?: Prisma.WebFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebFeatureInclude<ExtArgs> | null
  /**
   * Filter, which WebFeature to fetch.
   */
  where: Prisma.WebFeatureWhereUniqueInput
}

/**
 * WebFeature findUniqueOrThrow
 */
export type WebFeatureFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebFeature
   */
  select?: Prisma.WebFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebFeature
   */
  omit?: Prisma.WebFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebFeatureInclude<ExtArgs> | null
  /**
   * Filter, which WebFeature to fetch.
   */
  where: Prisma.WebFeatureWhereUniqueInput
}

/**
 * WebFeature findFirst
 */
export type WebFeatureFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebFeature
   */
  select?: Prisma.WebFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebFeature
   */
  omit?: Prisma.WebFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebFeatureInclude<ExtArgs> | null
  /**
   * Filter, which WebFeature to fetch.
   */
  where?: Prisma.WebFeatureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebFeatures to fetch.
   */
  orderBy?: Prisma.WebFeatureOrderByWithRelationInput | Prisma.WebFeatureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WebFeatures.
   */
  cursor?: Prisma.WebFeatureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebFeatures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebFeatures.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WebFeatures.
   */
  distinct?: Prisma.WebFeatureScalarFieldEnum | Prisma.WebFeatureScalarFieldEnum[]
}

/**
 * WebFeature findFirstOrThrow
 */
export type WebFeatureFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebFeature
   */
  select?: Prisma.WebFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebFeature
   */
  omit?: Prisma.WebFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebFeatureInclude<ExtArgs> | null
  /**
   * Filter, which WebFeature to fetch.
   */
  where?: Prisma.WebFeatureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebFeatures to fetch.
   */
  orderBy?: Prisma.WebFeatureOrderByWithRelationInput | Prisma.WebFeatureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WebFeatures.
   */
  cursor?: Prisma.WebFeatureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebFeatures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebFeatures.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WebFeatures.
   */
  distinct?: Prisma.WebFeatureScalarFieldEnum | Prisma.WebFeatureScalarFieldEnum[]
}

/**
 * WebFeature findMany
 */
export type WebFeatureFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebFeature
   */
  select?: Prisma.WebFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebFeature
   */
  omit?: Prisma.WebFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebFeatureInclude<ExtArgs> | null
  /**
   * Filter, which WebFeatures to fetch.
   */
  where?: Prisma.WebFeatureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebFeatures to fetch.
   */
  orderBy?: Prisma.WebFeatureOrderByWithRelationInput | Prisma.WebFeatureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WebFeatures.
   */
  cursor?: Prisma.WebFeatureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebFeatures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebFeatures.
   */
  skip?: number
  distinct?: Prisma.WebFeatureScalarFieldEnum | Prisma.WebFeatureScalarFieldEnum[]
}

/**
 * WebFeature create
 */
export type WebFeatureCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebFeature
   */
  select?: Prisma.WebFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebFeature
   */
  omit?: Prisma.WebFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebFeatureInclude<ExtArgs> | null
  /**
   * The data needed to create a WebFeature.
   */
  data: Prisma.XOR<Prisma.WebFeatureCreateInput, Prisma.WebFeatureUncheckedCreateInput>
}

/**
 * WebFeature createMany
 */
export type WebFeatureCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WebFeatures.
   */
  data: Prisma.WebFeatureCreateManyInput | Prisma.WebFeatureCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WebFeature createManyAndReturn
 */
export type WebFeatureCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebFeature
   */
  select?: Prisma.WebFeatureSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WebFeature
   */
  omit?: Prisma.WebFeatureOmit<ExtArgs> | null
  /**
   * The data used to create many WebFeatures.
   */
  data: Prisma.WebFeatureCreateManyInput | Prisma.WebFeatureCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebFeatureIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WebFeature update
 */
export type WebFeatureUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebFeature
   */
  select?: Prisma.WebFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebFeature
   */
  omit?: Prisma.WebFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebFeatureInclude<ExtArgs> | null
  /**
   * The data needed to update a WebFeature.
   */
  data: Prisma.XOR<Prisma.WebFeatureUpdateInput, Prisma.WebFeatureUncheckedUpdateInput>
  /**
   * Choose, which WebFeature to update.
   */
  where: Prisma.WebFeatureWhereUniqueInput
}

/**
 * WebFeature updateMany
 */
export type WebFeatureUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WebFeatures.
   */
  data: Prisma.XOR<Prisma.WebFeatureUpdateManyMutationInput, Prisma.WebFeatureUncheckedUpdateManyInput>
  /**
   * Filter which WebFeatures to update
   */
  where?: Prisma.WebFeatureWhereInput
  /**
   * Limit how many WebFeatures to update.
   */
  limit?: number
}

/**
 * WebFeature updateManyAndReturn
 */
export type WebFeatureUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebFeature
   */
  select?: Prisma.WebFeatureSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WebFeature
   */
  omit?: Prisma.WebFeatureOmit<ExtArgs> | null
  /**
   * The data used to update WebFeatures.
   */
  data: Prisma.XOR<Prisma.WebFeatureUpdateManyMutationInput, Prisma.WebFeatureUncheckedUpdateManyInput>
  /**
   * Filter which WebFeatures to update
   */
  where?: Prisma.WebFeatureWhereInput
  /**
   * Limit how many WebFeatures to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebFeatureIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WebFeature upsert
 */
export type WebFeatureUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebFeature
   */
  select?: Prisma.WebFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebFeature
   */
  omit?: Prisma.WebFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebFeatureInclude<ExtArgs> | null
  /**
   * The filter to search for the WebFeature to update in case it exists.
   */
  where: Prisma.WebFeatureWhereUniqueInput
  /**
   * In case the WebFeature found by the `where` argument doesn't exist, create a new WebFeature with this data.
   */
  create: Prisma.XOR<Prisma.WebFeatureCreateInput, Prisma.WebFeatureUncheckedCreateInput>
  /**
   * In case the WebFeature was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WebFeatureUpdateInput, Prisma.WebFeatureUncheckedUpdateInput>
}

/**
 * WebFeature delete
 */
export type WebFeatureDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebFeature
   */
  select?: Prisma.WebFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebFeature
   */
  omit?: Prisma.WebFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebFeatureInclude<ExtArgs> | null
  /**
   * Filter which WebFeature to delete.
   */
  where: Prisma.WebFeatureWhereUniqueInput
}

/**
 * WebFeature deleteMany
 */
export type WebFeatureDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WebFeatures to delete
   */
  where?: Prisma.WebFeatureWhereInput
  /**
   * Limit how many WebFeatures to delete.
   */
  limit?: number
}

/**
 * WebFeature without action
 */
export type WebFeatureDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebFeature
   */
  select?: Prisma.WebFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebFeature
   */
  omit?: Prisma.WebFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebFeatureInclude<ExtArgs> | null
}
