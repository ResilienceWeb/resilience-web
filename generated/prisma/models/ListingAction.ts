
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ListingAction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ListingAction
 * 
 */
export type ListingActionModel = runtime.Types.Result.DefaultSelection<Prisma.$ListingActionPayload>

export type AggregateListingAction = {
  _count: ListingActionCountAggregateOutputType | null
  _avg: ListingActionAvgAggregateOutputType | null
  _sum: ListingActionSumAggregateOutputType | null
  _min: ListingActionMinAggregateOutputType | null
  _max: ListingActionMaxAggregateOutputType | null
}

export type ListingActionAvgAggregateOutputType = {
  id: number | null
  listingId: number | null
  listingEditId: number | null
}

export type ListingActionSumAggregateOutputType = {
  id: number | null
  listingId: number | null
  listingEditId: number | null
}

export type ListingActionMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  listingId: number | null
  type: string | null
  url: string | null
  listingEditId: number | null
}

export type ListingActionMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  listingId: number | null
  type: string | null
  url: string | null
  listingEditId: number | null
}

export type ListingActionCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  listingId: number
  type: number
  url: number
  listingEditId: number
  _all: number
}


export type ListingActionAvgAggregateInputType = {
  id?: true
  listingId?: true
  listingEditId?: true
}

export type ListingActionSumAggregateInputType = {
  id?: true
  listingId?: true
  listingEditId?: true
}

export type ListingActionMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  listingId?: true
  type?: true
  url?: true
  listingEditId?: true
}

export type ListingActionMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  listingId?: true
  type?: true
  url?: true
  listingEditId?: true
}

export type ListingActionCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  listingId?: true
  type?: true
  url?: true
  listingEditId?: true
  _all?: true
}

export type ListingActionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ListingAction to aggregate.
   */
  where?: Prisma.ListingActionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ListingActions to fetch.
   */
  orderBy?: Prisma.ListingActionOrderByWithRelationInput | Prisma.ListingActionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ListingActionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ListingActions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ListingActions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ListingActions
  **/
  _count?: true | ListingActionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ListingActionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ListingActionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ListingActionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ListingActionMaxAggregateInputType
}

export type GetListingActionAggregateType<T extends ListingActionAggregateArgs> = {
      [P in keyof T & keyof AggregateListingAction]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateListingAction[P]>
    : Prisma.GetScalarType<T[P], AggregateListingAction[P]>
}




export type ListingActionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ListingActionWhereInput
  orderBy?: Prisma.ListingActionOrderByWithAggregationInput | Prisma.ListingActionOrderByWithAggregationInput[]
  by: Prisma.ListingActionScalarFieldEnum[] | Prisma.ListingActionScalarFieldEnum
  having?: Prisma.ListingActionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ListingActionCountAggregateInputType | true
  _avg?: ListingActionAvgAggregateInputType
  _sum?: ListingActionSumAggregateInputType
  _min?: ListingActionMinAggregateInputType
  _max?: ListingActionMaxAggregateInputType
}

export type ListingActionGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  listingId: number | null
  type: string
  url: string
  listingEditId: number | null
  _count: ListingActionCountAggregateOutputType | null
  _avg: ListingActionAvgAggregateOutputType | null
  _sum: ListingActionSumAggregateOutputType | null
  _min: ListingActionMinAggregateOutputType | null
  _max: ListingActionMaxAggregateOutputType | null
}

type GetListingActionGroupByPayload<T extends ListingActionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ListingActionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ListingActionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ListingActionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ListingActionGroupByOutputType[P]>
      }
    >
  >



export type ListingActionWhereInput = {
  AND?: Prisma.ListingActionWhereInput | Prisma.ListingActionWhereInput[]
  OR?: Prisma.ListingActionWhereInput[]
  NOT?: Prisma.ListingActionWhereInput | Prisma.ListingActionWhereInput[]
  id?: Prisma.IntFilter<"ListingAction"> | number
  createdAt?: Prisma.DateTimeFilter<"ListingAction"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ListingAction"> | Date | string
  listingId?: Prisma.IntNullableFilter<"ListingAction"> | number | null
  type?: Prisma.StringFilter<"ListingAction"> | string
  url?: Prisma.StringFilter<"ListingAction"> | string
  listingEditId?: Prisma.IntNullableFilter<"ListingAction"> | number | null
  listing?: Prisma.XOR<Prisma.ListingNullableScalarRelationFilter, Prisma.ListingWhereInput> | null
  ListingEdit?: Prisma.XOR<Prisma.ListingEditNullableScalarRelationFilter, Prisma.ListingEditWhereInput> | null
}

export type ListingActionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  listingId?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  url?: Prisma.SortOrder
  listingEditId?: Prisma.SortOrderInput | Prisma.SortOrder
  listing?: Prisma.ListingOrderByWithRelationInput
  ListingEdit?: Prisma.ListingEditOrderByWithRelationInput
}

export type ListingActionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ListingActionWhereInput | Prisma.ListingActionWhereInput[]
  OR?: Prisma.ListingActionWhereInput[]
  NOT?: Prisma.ListingActionWhereInput | Prisma.ListingActionWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"ListingAction"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ListingAction"> | Date | string
  listingId?: Prisma.IntNullableFilter<"ListingAction"> | number | null
  type?: Prisma.StringFilter<"ListingAction"> | string
  url?: Prisma.StringFilter<"ListingAction"> | string
  listingEditId?: Prisma.IntNullableFilter<"ListingAction"> | number | null
  listing?: Prisma.XOR<Prisma.ListingNullableScalarRelationFilter, Prisma.ListingWhereInput> | null
  ListingEdit?: Prisma.XOR<Prisma.ListingEditNullableScalarRelationFilter, Prisma.ListingEditWhereInput> | null
}, "id">

export type ListingActionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  listingId?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  url?: Prisma.SortOrder
  listingEditId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ListingActionCountOrderByAggregateInput
  _avg?: Prisma.ListingActionAvgOrderByAggregateInput
  _max?: Prisma.ListingActionMaxOrderByAggregateInput
  _min?: Prisma.ListingActionMinOrderByAggregateInput
  _sum?: Prisma.ListingActionSumOrderByAggregateInput
}

export type ListingActionScalarWhereWithAggregatesInput = {
  AND?: Prisma.ListingActionScalarWhereWithAggregatesInput | Prisma.ListingActionScalarWhereWithAggregatesInput[]
  OR?: Prisma.ListingActionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ListingActionScalarWhereWithAggregatesInput | Prisma.ListingActionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ListingAction"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ListingAction"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ListingAction"> | Date | string
  listingId?: Prisma.IntNullableWithAggregatesFilter<"ListingAction"> | number | null
  type?: Prisma.StringWithAggregatesFilter<"ListingAction"> | string
  url?: Prisma.StringWithAggregatesFilter<"ListingAction"> | string
  listingEditId?: Prisma.IntNullableWithAggregatesFilter<"ListingAction"> | number | null
}

export type ListingActionCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  type: string
  url: string
  listing?: Prisma.ListingCreateNestedOneWithoutActionsInput
  ListingEdit?: Prisma.ListingEditCreateNestedOneWithoutActionsInput
}

export type ListingActionUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  listingId?: number | null
  type: string
  url: string
  listingEditId?: number | null
}

export type ListingActionUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  listing?: Prisma.ListingUpdateOneWithoutActionsNestedInput
  ListingEdit?: Prisma.ListingEditUpdateOneWithoutActionsNestedInput
}

export type ListingActionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  listingId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  listingEditId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ListingActionCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  listingId?: number | null
  type: string
  url: string
  listingEditId?: number | null
}

export type ListingActionUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ListingActionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  listingId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  listingEditId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ListingActionListRelationFilter = {
  every?: Prisma.ListingActionWhereInput
  some?: Prisma.ListingActionWhereInput
  none?: Prisma.ListingActionWhereInput
}

export type ListingActionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ListingActionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  listingId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  url?: Prisma.SortOrder
  listingEditId?: Prisma.SortOrder
}

export type ListingActionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  listingId?: Prisma.SortOrder
  listingEditId?: Prisma.SortOrder
}

export type ListingActionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  listingId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  url?: Prisma.SortOrder
  listingEditId?: Prisma.SortOrder
}

export type ListingActionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  listingId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  url?: Prisma.SortOrder
  listingEditId?: Prisma.SortOrder
}

export type ListingActionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  listingId?: Prisma.SortOrder
  listingEditId?: Prisma.SortOrder
}

export type ListingActionCreateNestedManyWithoutListingInput = {
  create?: Prisma.XOR<Prisma.ListingActionCreateWithoutListingInput, Prisma.ListingActionUncheckedCreateWithoutListingInput> | Prisma.ListingActionCreateWithoutListingInput[] | Prisma.ListingActionUncheckedCreateWithoutListingInput[]
  connectOrCreate?: Prisma.ListingActionCreateOrConnectWithoutListingInput | Prisma.ListingActionCreateOrConnectWithoutListingInput[]
  createMany?: Prisma.ListingActionCreateManyListingInputEnvelope
  connect?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
}

export type ListingActionUncheckedCreateNestedManyWithoutListingInput = {
  create?: Prisma.XOR<Prisma.ListingActionCreateWithoutListingInput, Prisma.ListingActionUncheckedCreateWithoutListingInput> | Prisma.ListingActionCreateWithoutListingInput[] | Prisma.ListingActionUncheckedCreateWithoutListingInput[]
  connectOrCreate?: Prisma.ListingActionCreateOrConnectWithoutListingInput | Prisma.ListingActionCreateOrConnectWithoutListingInput[]
  createMany?: Prisma.ListingActionCreateManyListingInputEnvelope
  connect?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
}

export type ListingActionUpdateManyWithoutListingNestedInput = {
  create?: Prisma.XOR<Prisma.ListingActionCreateWithoutListingInput, Prisma.ListingActionUncheckedCreateWithoutListingInput> | Prisma.ListingActionCreateWithoutListingInput[] | Prisma.ListingActionUncheckedCreateWithoutListingInput[]
  connectOrCreate?: Prisma.ListingActionCreateOrConnectWithoutListingInput | Prisma.ListingActionCreateOrConnectWithoutListingInput[]
  upsert?: Prisma.ListingActionUpsertWithWhereUniqueWithoutListingInput | Prisma.ListingActionUpsertWithWhereUniqueWithoutListingInput[]
  createMany?: Prisma.ListingActionCreateManyListingInputEnvelope
  set?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  disconnect?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  delete?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  connect?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  update?: Prisma.ListingActionUpdateWithWhereUniqueWithoutListingInput | Prisma.ListingActionUpdateWithWhereUniqueWithoutListingInput[]
  updateMany?: Prisma.ListingActionUpdateManyWithWhereWithoutListingInput | Prisma.ListingActionUpdateManyWithWhereWithoutListingInput[]
  deleteMany?: Prisma.ListingActionScalarWhereInput | Prisma.ListingActionScalarWhereInput[]
}

export type ListingActionUncheckedUpdateManyWithoutListingNestedInput = {
  create?: Prisma.XOR<Prisma.ListingActionCreateWithoutListingInput, Prisma.ListingActionUncheckedCreateWithoutListingInput> | Prisma.ListingActionCreateWithoutListingInput[] | Prisma.ListingActionUncheckedCreateWithoutListingInput[]
  connectOrCreate?: Prisma.ListingActionCreateOrConnectWithoutListingInput | Prisma.ListingActionCreateOrConnectWithoutListingInput[]
  upsert?: Prisma.ListingActionUpsertWithWhereUniqueWithoutListingInput | Prisma.ListingActionUpsertWithWhereUniqueWithoutListingInput[]
  createMany?: Prisma.ListingActionCreateManyListingInputEnvelope
  set?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  disconnect?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  delete?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  connect?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  update?: Prisma.ListingActionUpdateWithWhereUniqueWithoutListingInput | Prisma.ListingActionUpdateWithWhereUniqueWithoutListingInput[]
  updateMany?: Prisma.ListingActionUpdateManyWithWhereWithoutListingInput | Prisma.ListingActionUpdateManyWithWhereWithoutListingInput[]
  deleteMany?: Prisma.ListingActionScalarWhereInput | Prisma.ListingActionScalarWhereInput[]
}

export type ListingActionCreateNestedManyWithoutListingEditInput = {
  create?: Prisma.XOR<Prisma.ListingActionCreateWithoutListingEditInput, Prisma.ListingActionUncheckedCreateWithoutListingEditInput> | Prisma.ListingActionCreateWithoutListingEditInput[] | Prisma.ListingActionUncheckedCreateWithoutListingEditInput[]
  connectOrCreate?: Prisma.ListingActionCreateOrConnectWithoutListingEditInput | Prisma.ListingActionCreateOrConnectWithoutListingEditInput[]
  createMany?: Prisma.ListingActionCreateManyListingEditInputEnvelope
  connect?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
}

export type ListingActionUncheckedCreateNestedManyWithoutListingEditInput = {
  create?: Prisma.XOR<Prisma.ListingActionCreateWithoutListingEditInput, Prisma.ListingActionUncheckedCreateWithoutListingEditInput> | Prisma.ListingActionCreateWithoutListingEditInput[] | Prisma.ListingActionUncheckedCreateWithoutListingEditInput[]
  connectOrCreate?: Prisma.ListingActionCreateOrConnectWithoutListingEditInput | Prisma.ListingActionCreateOrConnectWithoutListingEditInput[]
  createMany?: Prisma.ListingActionCreateManyListingEditInputEnvelope
  connect?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
}

export type ListingActionUpdateManyWithoutListingEditNestedInput = {
  create?: Prisma.XOR<Prisma.ListingActionCreateWithoutListingEditInput, Prisma.ListingActionUncheckedCreateWithoutListingEditInput> | Prisma.ListingActionCreateWithoutListingEditInput[] | Prisma.ListingActionUncheckedCreateWithoutListingEditInput[]
  connectOrCreate?: Prisma.ListingActionCreateOrConnectWithoutListingEditInput | Prisma.ListingActionCreateOrConnectWithoutListingEditInput[]
  upsert?: Prisma.ListingActionUpsertWithWhereUniqueWithoutListingEditInput | Prisma.ListingActionUpsertWithWhereUniqueWithoutListingEditInput[]
  createMany?: Prisma.ListingActionCreateManyListingEditInputEnvelope
  set?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  disconnect?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  delete?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  connect?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  update?: Prisma.ListingActionUpdateWithWhereUniqueWithoutListingEditInput | Prisma.ListingActionUpdateWithWhereUniqueWithoutListingEditInput[]
  updateMany?: Prisma.ListingActionUpdateManyWithWhereWithoutListingEditInput | Prisma.ListingActionUpdateManyWithWhereWithoutListingEditInput[]
  deleteMany?: Prisma.ListingActionScalarWhereInput | Prisma.ListingActionScalarWhereInput[]
}

export type ListingActionUncheckedUpdateManyWithoutListingEditNestedInput = {
  create?: Prisma.XOR<Prisma.ListingActionCreateWithoutListingEditInput, Prisma.ListingActionUncheckedCreateWithoutListingEditInput> | Prisma.ListingActionCreateWithoutListingEditInput[] | Prisma.ListingActionUncheckedCreateWithoutListingEditInput[]
  connectOrCreate?: Prisma.ListingActionCreateOrConnectWithoutListingEditInput | Prisma.ListingActionCreateOrConnectWithoutListingEditInput[]
  upsert?: Prisma.ListingActionUpsertWithWhereUniqueWithoutListingEditInput | Prisma.ListingActionUpsertWithWhereUniqueWithoutListingEditInput[]
  createMany?: Prisma.ListingActionCreateManyListingEditInputEnvelope
  set?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  disconnect?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  delete?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  connect?: Prisma.ListingActionWhereUniqueInput | Prisma.ListingActionWhereUniqueInput[]
  update?: Prisma.ListingActionUpdateWithWhereUniqueWithoutListingEditInput | Prisma.ListingActionUpdateWithWhereUniqueWithoutListingEditInput[]
  updateMany?: Prisma.ListingActionUpdateManyWithWhereWithoutListingEditInput | Prisma.ListingActionUpdateManyWithWhereWithoutListingEditInput[]
  deleteMany?: Prisma.ListingActionScalarWhereInput | Prisma.ListingActionScalarWhereInput[]
}

export type ListingActionCreateWithoutListingInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  type: string
  url: string
  ListingEdit?: Prisma.ListingEditCreateNestedOneWithoutActionsInput
}

export type ListingActionUncheckedCreateWithoutListingInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  type: string
  url: string
  listingEditId?: number | null
}

export type ListingActionCreateOrConnectWithoutListingInput = {
  where: Prisma.ListingActionWhereUniqueInput
  create: Prisma.XOR<Prisma.ListingActionCreateWithoutListingInput, Prisma.ListingActionUncheckedCreateWithoutListingInput>
}

export type ListingActionCreateManyListingInputEnvelope = {
  data: Prisma.ListingActionCreateManyListingInput | Prisma.ListingActionCreateManyListingInput[]
  skipDuplicates?: boolean
}

export type ListingActionUpsertWithWhereUniqueWithoutListingInput = {
  where: Prisma.ListingActionWhereUniqueInput
  update: Prisma.XOR<Prisma.ListingActionUpdateWithoutListingInput, Prisma.ListingActionUncheckedUpdateWithoutListingInput>
  create: Prisma.XOR<Prisma.ListingActionCreateWithoutListingInput, Prisma.ListingActionUncheckedCreateWithoutListingInput>
}

export type ListingActionUpdateWithWhereUniqueWithoutListingInput = {
  where: Prisma.ListingActionWhereUniqueInput
  data: Prisma.XOR<Prisma.ListingActionUpdateWithoutListingInput, Prisma.ListingActionUncheckedUpdateWithoutListingInput>
}

export type ListingActionUpdateManyWithWhereWithoutListingInput = {
  where: Prisma.ListingActionScalarWhereInput
  data: Prisma.XOR<Prisma.ListingActionUpdateManyMutationInput, Prisma.ListingActionUncheckedUpdateManyWithoutListingInput>
}

export type ListingActionScalarWhereInput = {
  AND?: Prisma.ListingActionScalarWhereInput | Prisma.ListingActionScalarWhereInput[]
  OR?: Prisma.ListingActionScalarWhereInput[]
  NOT?: Prisma.ListingActionScalarWhereInput | Prisma.ListingActionScalarWhereInput[]
  id?: Prisma.IntFilter<"ListingAction"> | number
  createdAt?: Prisma.DateTimeFilter<"ListingAction"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ListingAction"> | Date | string
  listingId?: Prisma.IntNullableFilter<"ListingAction"> | number | null
  type?: Prisma.StringFilter<"ListingAction"> | string
  url?: Prisma.StringFilter<"ListingAction"> | string
  listingEditId?: Prisma.IntNullableFilter<"ListingAction"> | number | null
}

export type ListingActionCreateWithoutListingEditInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  type: string
  url: string
  listing?: Prisma.ListingCreateNestedOneWithoutActionsInput
}

export type ListingActionUncheckedCreateWithoutListingEditInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  listingId?: number | null
  type: string
  url: string
}

export type ListingActionCreateOrConnectWithoutListingEditInput = {
  where: Prisma.ListingActionWhereUniqueInput
  create: Prisma.XOR<Prisma.ListingActionCreateWithoutListingEditInput, Prisma.ListingActionUncheckedCreateWithoutListingEditInput>
}

export type ListingActionCreateManyListingEditInputEnvelope = {
  data: Prisma.ListingActionCreateManyListingEditInput | Prisma.ListingActionCreateManyListingEditInput[]
  skipDuplicates?: boolean
}

export type ListingActionUpsertWithWhereUniqueWithoutListingEditInput = {
  where: Prisma.ListingActionWhereUniqueInput
  update: Prisma.XOR<Prisma.ListingActionUpdateWithoutListingEditInput, Prisma.ListingActionUncheckedUpdateWithoutListingEditInput>
  create: Prisma.XOR<Prisma.ListingActionCreateWithoutListingEditInput, Prisma.ListingActionUncheckedCreateWithoutListingEditInput>
}

export type ListingActionUpdateWithWhereUniqueWithoutListingEditInput = {
  where: Prisma.ListingActionWhereUniqueInput
  data: Prisma.XOR<Prisma.ListingActionUpdateWithoutListingEditInput, Prisma.ListingActionUncheckedUpdateWithoutListingEditInput>
}

export type ListingActionUpdateManyWithWhereWithoutListingEditInput = {
  where: Prisma.ListingActionScalarWhereInput
  data: Prisma.XOR<Prisma.ListingActionUpdateManyMutationInput, Prisma.ListingActionUncheckedUpdateManyWithoutListingEditInput>
}

export type ListingActionCreateManyListingInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  type: string
  url: string
  listingEditId?: number | null
}

export type ListingActionUpdateWithoutListingInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  ListingEdit?: Prisma.ListingEditUpdateOneWithoutActionsNestedInput
}

export type ListingActionUncheckedUpdateWithoutListingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  listingEditId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ListingActionUncheckedUpdateManyWithoutListingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  listingEditId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ListingActionCreateManyListingEditInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  listingId?: number | null
  type: string
  url: string
}

export type ListingActionUpdateWithoutListingEditInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  listing?: Prisma.ListingUpdateOneWithoutActionsNestedInput
}

export type ListingActionUncheckedUpdateWithoutListingEditInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  listingId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ListingActionUncheckedUpdateManyWithoutListingEditInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  listingId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
}



export type ListingActionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  listingId?: boolean
  type?: boolean
  url?: boolean
  listingEditId?: boolean
  listing?: boolean | Prisma.ListingAction$listingArgs<ExtArgs>
  ListingEdit?: boolean | Prisma.ListingAction$ListingEditArgs<ExtArgs>
}, ExtArgs["result"]["listingAction"]>

export type ListingActionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  listingId?: boolean
  type?: boolean
  url?: boolean
  listingEditId?: boolean
  listing?: boolean | Prisma.ListingAction$listingArgs<ExtArgs>
  ListingEdit?: boolean | Prisma.ListingAction$ListingEditArgs<ExtArgs>
}, ExtArgs["result"]["listingAction"]>

export type ListingActionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  listingId?: boolean
  type?: boolean
  url?: boolean
  listingEditId?: boolean
  listing?: boolean | Prisma.ListingAction$listingArgs<ExtArgs>
  ListingEdit?: boolean | Prisma.ListingAction$ListingEditArgs<ExtArgs>
}, ExtArgs["result"]["listingAction"]>

export type ListingActionSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  listingId?: boolean
  type?: boolean
  url?: boolean
  listingEditId?: boolean
}

export type ListingActionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "listingId" | "type" | "url" | "listingEditId", ExtArgs["result"]["listingAction"]>
export type ListingActionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  listing?: boolean | Prisma.ListingAction$listingArgs<ExtArgs>
  ListingEdit?: boolean | Prisma.ListingAction$ListingEditArgs<ExtArgs>
}
export type ListingActionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  listing?: boolean | Prisma.ListingAction$listingArgs<ExtArgs>
  ListingEdit?: boolean | Prisma.ListingAction$ListingEditArgs<ExtArgs>
}
export type ListingActionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  listing?: boolean | Prisma.ListingAction$listingArgs<ExtArgs>
  ListingEdit?: boolean | Prisma.ListingAction$ListingEditArgs<ExtArgs>
}

export type $ListingActionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ListingAction"
  objects: {
    listing: Prisma.$ListingPayload<ExtArgs> | null
    ListingEdit: Prisma.$ListingEditPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    listingId: number | null
    type: string
    url: string
    listingEditId: number | null
  }, ExtArgs["result"]["listingAction"]>
  composites: {}
}

export type ListingActionGetPayload<S extends boolean | null | undefined | ListingActionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ListingActionPayload, S>

export type ListingActionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ListingActionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ListingActionCountAggregateInputType | true
  }

export interface ListingActionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ListingAction'], meta: { name: 'ListingAction' } }
  /**
   * Find zero or one ListingAction that matches the filter.
   * @param {ListingActionFindUniqueArgs} args - Arguments to find a ListingAction
   * @example
   * // Get one ListingAction
   * const listingAction = await prisma.listingAction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ListingActionFindUniqueArgs>(args: Prisma.SelectSubset<T, ListingActionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ListingActionClient<runtime.Types.Result.GetResult<Prisma.$ListingActionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ListingAction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ListingActionFindUniqueOrThrowArgs} args - Arguments to find a ListingAction
   * @example
   * // Get one ListingAction
   * const listingAction = await prisma.listingAction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ListingActionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ListingActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ListingActionClient<runtime.Types.Result.GetResult<Prisma.$ListingActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ListingAction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingActionFindFirstArgs} args - Arguments to find a ListingAction
   * @example
   * // Get one ListingAction
   * const listingAction = await prisma.listingAction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ListingActionFindFirstArgs>(args?: Prisma.SelectSubset<T, ListingActionFindFirstArgs<ExtArgs>>): Prisma.Prisma__ListingActionClient<runtime.Types.Result.GetResult<Prisma.$ListingActionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ListingAction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingActionFindFirstOrThrowArgs} args - Arguments to find a ListingAction
   * @example
   * // Get one ListingAction
   * const listingAction = await prisma.listingAction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ListingActionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ListingActionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ListingActionClient<runtime.Types.Result.GetResult<Prisma.$ListingActionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ListingActions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingActionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ListingActions
   * const listingActions = await prisma.listingAction.findMany()
   * 
   * // Get first 10 ListingActions
   * const listingActions = await prisma.listingAction.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const listingActionWithIdOnly = await prisma.listingAction.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ListingActionFindManyArgs>(args?: Prisma.SelectSubset<T, ListingActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ListingActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ListingAction.
   * @param {ListingActionCreateArgs} args - Arguments to create a ListingAction.
   * @example
   * // Create one ListingAction
   * const ListingAction = await prisma.listingAction.create({
   *   data: {
   *     // ... data to create a ListingAction
   *   }
   * })
   * 
   */
  create<T extends ListingActionCreateArgs>(args: Prisma.SelectSubset<T, ListingActionCreateArgs<ExtArgs>>): Prisma.Prisma__ListingActionClient<runtime.Types.Result.GetResult<Prisma.$ListingActionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ListingActions.
   * @param {ListingActionCreateManyArgs} args - Arguments to create many ListingActions.
   * @example
   * // Create many ListingActions
   * const listingAction = await prisma.listingAction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ListingActionCreateManyArgs>(args?: Prisma.SelectSubset<T, ListingActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ListingActions and returns the data saved in the database.
   * @param {ListingActionCreateManyAndReturnArgs} args - Arguments to create many ListingActions.
   * @example
   * // Create many ListingActions
   * const listingAction = await prisma.listingAction.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ListingActions and only return the `id`
   * const listingActionWithIdOnly = await prisma.listingAction.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ListingActionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ListingActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ListingActionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ListingAction.
   * @param {ListingActionDeleteArgs} args - Arguments to delete one ListingAction.
   * @example
   * // Delete one ListingAction
   * const ListingAction = await prisma.listingAction.delete({
   *   where: {
   *     // ... filter to delete one ListingAction
   *   }
   * })
   * 
   */
  delete<T extends ListingActionDeleteArgs>(args: Prisma.SelectSubset<T, ListingActionDeleteArgs<ExtArgs>>): Prisma.Prisma__ListingActionClient<runtime.Types.Result.GetResult<Prisma.$ListingActionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ListingAction.
   * @param {ListingActionUpdateArgs} args - Arguments to update one ListingAction.
   * @example
   * // Update one ListingAction
   * const listingAction = await prisma.listingAction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ListingActionUpdateArgs>(args: Prisma.SelectSubset<T, ListingActionUpdateArgs<ExtArgs>>): Prisma.Prisma__ListingActionClient<runtime.Types.Result.GetResult<Prisma.$ListingActionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ListingActions.
   * @param {ListingActionDeleteManyArgs} args - Arguments to filter ListingActions to delete.
   * @example
   * // Delete a few ListingActions
   * const { count } = await prisma.listingAction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ListingActionDeleteManyArgs>(args?: Prisma.SelectSubset<T, ListingActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ListingActions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingActionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ListingActions
   * const listingAction = await prisma.listingAction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ListingActionUpdateManyArgs>(args: Prisma.SelectSubset<T, ListingActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ListingActions and returns the data updated in the database.
   * @param {ListingActionUpdateManyAndReturnArgs} args - Arguments to update many ListingActions.
   * @example
   * // Update many ListingActions
   * const listingAction = await prisma.listingAction.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ListingActions and only return the `id`
   * const listingActionWithIdOnly = await prisma.listingAction.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ListingActionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ListingActionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ListingActionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ListingAction.
   * @param {ListingActionUpsertArgs} args - Arguments to update or create a ListingAction.
   * @example
   * // Update or create a ListingAction
   * const listingAction = await prisma.listingAction.upsert({
   *   create: {
   *     // ... data to create a ListingAction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ListingAction we want to update
   *   }
   * })
   */
  upsert<T extends ListingActionUpsertArgs>(args: Prisma.SelectSubset<T, ListingActionUpsertArgs<ExtArgs>>): Prisma.Prisma__ListingActionClient<runtime.Types.Result.GetResult<Prisma.$ListingActionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ListingActions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingActionCountArgs} args - Arguments to filter ListingActions to count.
   * @example
   * // Count the number of ListingActions
   * const count = await prisma.listingAction.count({
   *   where: {
   *     // ... the filter for the ListingActions we want to count
   *   }
   * })
  **/
  count<T extends ListingActionCountArgs>(
    args?: Prisma.Subset<T, ListingActionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ListingActionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ListingAction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ListingActionAggregateArgs>(args: Prisma.Subset<T, ListingActionAggregateArgs>): Prisma.PrismaPromise<GetListingActionAggregateType<T>>

  /**
   * Group by ListingAction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingActionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ListingActionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ListingActionGroupByArgs['orderBy'] }
      : { orderBy?: ListingActionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ListingActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListingActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ListingAction model
 */
readonly fields: ListingActionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ListingAction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ListingActionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  listing<T extends Prisma.ListingAction$listingArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ListingAction$listingArgs<ExtArgs>>): Prisma.Prisma__ListingClient<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  ListingEdit<T extends Prisma.ListingAction$ListingEditArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ListingAction$ListingEditArgs<ExtArgs>>): Prisma.Prisma__ListingEditClient<runtime.Types.Result.GetResult<Prisma.$ListingEditPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ListingAction model
 */
export interface ListingActionFieldRefs {
  readonly id: Prisma.FieldRef<"ListingAction", 'Int'>
  readonly createdAt: Prisma.FieldRef<"ListingAction", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ListingAction", 'DateTime'>
  readonly listingId: Prisma.FieldRef<"ListingAction", 'Int'>
  readonly type: Prisma.FieldRef<"ListingAction", 'String'>
  readonly url: Prisma.FieldRef<"ListingAction", 'String'>
  readonly listingEditId: Prisma.FieldRef<"ListingAction", 'Int'>
}
    

// Custom InputTypes
/**
 * ListingAction findUnique
 */
export type ListingActionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingAction
   */
  select?: Prisma.ListingActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingAction
   */
  omit?: Prisma.ListingActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingActionInclude<ExtArgs> | null
  /**
   * Filter, which ListingAction to fetch.
   */
  where: Prisma.ListingActionWhereUniqueInput
}

/**
 * ListingAction findUniqueOrThrow
 */
export type ListingActionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingAction
   */
  select?: Prisma.ListingActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingAction
   */
  omit?: Prisma.ListingActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingActionInclude<ExtArgs> | null
  /**
   * Filter, which ListingAction to fetch.
   */
  where: Prisma.ListingActionWhereUniqueInput
}

/**
 * ListingAction findFirst
 */
export type ListingActionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingAction
   */
  select?: Prisma.ListingActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingAction
   */
  omit?: Prisma.ListingActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingActionInclude<ExtArgs> | null
  /**
   * Filter, which ListingAction to fetch.
   */
  where?: Prisma.ListingActionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ListingActions to fetch.
   */
  orderBy?: Prisma.ListingActionOrderByWithRelationInput | Prisma.ListingActionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ListingActions.
   */
  cursor?: Prisma.ListingActionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ListingActions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ListingActions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ListingActions.
   */
  distinct?: Prisma.ListingActionScalarFieldEnum | Prisma.ListingActionScalarFieldEnum[]
}

/**
 * ListingAction findFirstOrThrow
 */
export type ListingActionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingAction
   */
  select?: Prisma.ListingActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingAction
   */
  omit?: Prisma.ListingActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingActionInclude<ExtArgs> | null
  /**
   * Filter, which ListingAction to fetch.
   */
  where?: Prisma.ListingActionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ListingActions to fetch.
   */
  orderBy?: Prisma.ListingActionOrderByWithRelationInput | Prisma.ListingActionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ListingActions.
   */
  cursor?: Prisma.ListingActionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ListingActions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ListingActions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ListingActions.
   */
  distinct?: Prisma.ListingActionScalarFieldEnum | Prisma.ListingActionScalarFieldEnum[]
}

/**
 * ListingAction findMany
 */
export type ListingActionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingAction
   */
  select?: Prisma.ListingActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingAction
   */
  omit?: Prisma.ListingActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingActionInclude<ExtArgs> | null
  /**
   * Filter, which ListingActions to fetch.
   */
  where?: Prisma.ListingActionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ListingActions to fetch.
   */
  orderBy?: Prisma.ListingActionOrderByWithRelationInput | Prisma.ListingActionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ListingActions.
   */
  cursor?: Prisma.ListingActionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ListingActions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ListingActions.
   */
  skip?: number
  distinct?: Prisma.ListingActionScalarFieldEnum | Prisma.ListingActionScalarFieldEnum[]
}

/**
 * ListingAction create
 */
export type ListingActionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingAction
   */
  select?: Prisma.ListingActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingAction
   */
  omit?: Prisma.ListingActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingActionInclude<ExtArgs> | null
  /**
   * The data needed to create a ListingAction.
   */
  data: Prisma.XOR<Prisma.ListingActionCreateInput, Prisma.ListingActionUncheckedCreateInput>
}

/**
 * ListingAction createMany
 */
export type ListingActionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ListingActions.
   */
  data: Prisma.ListingActionCreateManyInput | Prisma.ListingActionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ListingAction createManyAndReturn
 */
export type ListingActionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingAction
   */
  select?: Prisma.ListingActionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ListingAction
   */
  omit?: Prisma.ListingActionOmit<ExtArgs> | null
  /**
   * The data used to create many ListingActions.
   */
  data: Prisma.ListingActionCreateManyInput | Prisma.ListingActionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingActionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ListingAction update
 */
export type ListingActionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingAction
   */
  select?: Prisma.ListingActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingAction
   */
  omit?: Prisma.ListingActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingActionInclude<ExtArgs> | null
  /**
   * The data needed to update a ListingAction.
   */
  data: Prisma.XOR<Prisma.ListingActionUpdateInput, Prisma.ListingActionUncheckedUpdateInput>
  /**
   * Choose, which ListingAction to update.
   */
  where: Prisma.ListingActionWhereUniqueInput
}

/**
 * ListingAction updateMany
 */
export type ListingActionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ListingActions.
   */
  data: Prisma.XOR<Prisma.ListingActionUpdateManyMutationInput, Prisma.ListingActionUncheckedUpdateManyInput>
  /**
   * Filter which ListingActions to update
   */
  where?: Prisma.ListingActionWhereInput
  /**
   * Limit how many ListingActions to update.
   */
  limit?: number
}

/**
 * ListingAction updateManyAndReturn
 */
export type ListingActionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingAction
   */
  select?: Prisma.ListingActionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ListingAction
   */
  omit?: Prisma.ListingActionOmit<ExtArgs> | null
  /**
   * The data used to update ListingActions.
   */
  data: Prisma.XOR<Prisma.ListingActionUpdateManyMutationInput, Prisma.ListingActionUncheckedUpdateManyInput>
  /**
   * Filter which ListingActions to update
   */
  where?: Prisma.ListingActionWhereInput
  /**
   * Limit how many ListingActions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingActionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ListingAction upsert
 */
export type ListingActionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingAction
   */
  select?: Prisma.ListingActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingAction
   */
  omit?: Prisma.ListingActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingActionInclude<ExtArgs> | null
  /**
   * The filter to search for the ListingAction to update in case it exists.
   */
  where: Prisma.ListingActionWhereUniqueInput
  /**
   * In case the ListingAction found by the `where` argument doesn't exist, create a new ListingAction with this data.
   */
  create: Prisma.XOR<Prisma.ListingActionCreateInput, Prisma.ListingActionUncheckedCreateInput>
  /**
   * In case the ListingAction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ListingActionUpdateInput, Prisma.ListingActionUncheckedUpdateInput>
}

/**
 * ListingAction delete
 */
export type ListingActionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingAction
   */
  select?: Prisma.ListingActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingAction
   */
  omit?: Prisma.ListingActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingActionInclude<ExtArgs> | null
  /**
   * Filter which ListingAction to delete.
   */
  where: Prisma.ListingActionWhereUniqueInput
}

/**
 * ListingAction deleteMany
 */
export type ListingActionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ListingActions to delete
   */
  where?: Prisma.ListingActionWhereInput
  /**
   * Limit how many ListingActions to delete.
   */
  limit?: number
}

/**
 * ListingAction.listing
 */
export type ListingAction$listingArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingInclude<ExtArgs> | null
  where?: Prisma.ListingWhereInput
}

/**
 * ListingAction.ListingEdit
 */
export type ListingAction$ListingEditArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingEdit
   */
  select?: Prisma.ListingEditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingEdit
   */
  omit?: Prisma.ListingEditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingEditInclude<ExtArgs> | null
  where?: Prisma.ListingEditWhereInput
}

/**
 * ListingAction without action
 */
export type ListingActionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingAction
   */
  select?: Prisma.ListingActionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingAction
   */
  omit?: Prisma.ListingActionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingActionInclude<ExtArgs> | null
}
