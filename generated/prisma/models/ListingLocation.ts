
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ListingLocation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ListingLocation
 * 
 */
export type ListingLocationModel = runtime.Types.Result.DefaultSelection<Prisma.$ListingLocationPayload>

export type AggregateListingLocation = {
  _count: ListingLocationCountAggregateOutputType | null
  _avg: ListingLocationAvgAggregateOutputType | null
  _sum: ListingLocationSumAggregateOutputType | null
  _min: ListingLocationMinAggregateOutputType | null
  _max: ListingLocationMaxAggregateOutputType | null
}

export type ListingLocationAvgAggregateOutputType = {
  id: number | null
  latitude: number | null
  longitude: number | null
}

export type ListingLocationSumAggregateOutputType = {
  id: number | null
  latitude: number | null
  longitude: number | null
}

export type ListingLocationMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  latitude: number | null
  longitude: number | null
  description: string | null
  noPhysicalLocation: boolean | null
}

export type ListingLocationMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  latitude: number | null
  longitude: number | null
  description: string | null
  noPhysicalLocation: boolean | null
}

export type ListingLocationCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  latitude: number
  longitude: number
  description: number
  noPhysicalLocation: number
  _all: number
}


export type ListingLocationAvgAggregateInputType = {
  id?: true
  latitude?: true
  longitude?: true
}

export type ListingLocationSumAggregateInputType = {
  id?: true
  latitude?: true
  longitude?: true
}

export type ListingLocationMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  latitude?: true
  longitude?: true
  description?: true
  noPhysicalLocation?: true
}

export type ListingLocationMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  latitude?: true
  longitude?: true
  description?: true
  noPhysicalLocation?: true
}

export type ListingLocationCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  latitude?: true
  longitude?: true
  description?: true
  noPhysicalLocation?: true
  _all?: true
}

export type ListingLocationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ListingLocation to aggregate.
   */
  where?: Prisma.ListingLocationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ListingLocations to fetch.
   */
  orderBy?: Prisma.ListingLocationOrderByWithRelationInput | Prisma.ListingLocationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ListingLocationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ListingLocations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ListingLocations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ListingLocations
  **/
  _count?: true | ListingLocationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ListingLocationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ListingLocationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ListingLocationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ListingLocationMaxAggregateInputType
}

export type GetListingLocationAggregateType<T extends ListingLocationAggregateArgs> = {
      [P in keyof T & keyof AggregateListingLocation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateListingLocation[P]>
    : Prisma.GetScalarType<T[P], AggregateListingLocation[P]>
}




export type ListingLocationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ListingLocationWhereInput
  orderBy?: Prisma.ListingLocationOrderByWithAggregationInput | Prisma.ListingLocationOrderByWithAggregationInput[]
  by: Prisma.ListingLocationScalarFieldEnum[] | Prisma.ListingLocationScalarFieldEnum
  having?: Prisma.ListingLocationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ListingLocationCountAggregateInputType | true
  _avg?: ListingLocationAvgAggregateInputType
  _sum?: ListingLocationSumAggregateInputType
  _min?: ListingLocationMinAggregateInputType
  _max?: ListingLocationMaxAggregateInputType
}

export type ListingLocationGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  latitude: number | null
  longitude: number | null
  description: string | null
  noPhysicalLocation: boolean | null
  _count: ListingLocationCountAggregateOutputType | null
  _avg: ListingLocationAvgAggregateOutputType | null
  _sum: ListingLocationSumAggregateOutputType | null
  _min: ListingLocationMinAggregateOutputType | null
  _max: ListingLocationMaxAggregateOutputType | null
}

type GetListingLocationGroupByPayload<T extends ListingLocationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ListingLocationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ListingLocationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ListingLocationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ListingLocationGroupByOutputType[P]>
      }
    >
  >



export type ListingLocationWhereInput = {
  AND?: Prisma.ListingLocationWhereInput | Prisma.ListingLocationWhereInput[]
  OR?: Prisma.ListingLocationWhereInput[]
  NOT?: Prisma.ListingLocationWhereInput | Prisma.ListingLocationWhereInput[]
  id?: Prisma.IntFilter<"ListingLocation"> | number
  createdAt?: Prisma.DateTimeFilter<"ListingLocation"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ListingLocation"> | Date | string
  latitude?: Prisma.FloatNullableFilter<"ListingLocation"> | number | null
  longitude?: Prisma.FloatNullableFilter<"ListingLocation"> | number | null
  description?: Prisma.StringNullableFilter<"ListingLocation"> | string | null
  noPhysicalLocation?: Prisma.BoolNullableFilter<"ListingLocation"> | boolean | null
  listing?: Prisma.XOR<Prisma.ListingNullableScalarRelationFilter, Prisma.ListingWhereInput> | null
  ListingEdit?: Prisma.ListingEditListRelationFilter
}

export type ListingLocationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  latitude?: Prisma.SortOrderInput | Prisma.SortOrder
  longitude?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  noPhysicalLocation?: Prisma.SortOrderInput | Prisma.SortOrder
  listing?: Prisma.ListingOrderByWithRelationInput
  ListingEdit?: Prisma.ListingEditOrderByRelationAggregateInput
}

export type ListingLocationWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ListingLocationWhereInput | Prisma.ListingLocationWhereInput[]
  OR?: Prisma.ListingLocationWhereInput[]
  NOT?: Prisma.ListingLocationWhereInput | Prisma.ListingLocationWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"ListingLocation"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ListingLocation"> | Date | string
  latitude?: Prisma.FloatNullableFilter<"ListingLocation"> | number | null
  longitude?: Prisma.FloatNullableFilter<"ListingLocation"> | number | null
  description?: Prisma.StringNullableFilter<"ListingLocation"> | string | null
  noPhysicalLocation?: Prisma.BoolNullableFilter<"ListingLocation"> | boolean | null
  listing?: Prisma.XOR<Prisma.ListingNullableScalarRelationFilter, Prisma.ListingWhereInput> | null
  ListingEdit?: Prisma.ListingEditListRelationFilter
}, "id">

export type ListingLocationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  latitude?: Prisma.SortOrderInput | Prisma.SortOrder
  longitude?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  noPhysicalLocation?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ListingLocationCountOrderByAggregateInput
  _avg?: Prisma.ListingLocationAvgOrderByAggregateInput
  _max?: Prisma.ListingLocationMaxOrderByAggregateInput
  _min?: Prisma.ListingLocationMinOrderByAggregateInput
  _sum?: Prisma.ListingLocationSumOrderByAggregateInput
}

export type ListingLocationScalarWhereWithAggregatesInput = {
  AND?: Prisma.ListingLocationScalarWhereWithAggregatesInput | Prisma.ListingLocationScalarWhereWithAggregatesInput[]
  OR?: Prisma.ListingLocationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ListingLocationScalarWhereWithAggregatesInput | Prisma.ListingLocationScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ListingLocation"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ListingLocation"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ListingLocation"> | Date | string
  latitude?: Prisma.FloatNullableWithAggregatesFilter<"ListingLocation"> | number | null
  longitude?: Prisma.FloatNullableWithAggregatesFilter<"ListingLocation"> | number | null
  description?: Prisma.StringNullableWithAggregatesFilter<"ListingLocation"> | string | null
  noPhysicalLocation?: Prisma.BoolNullableWithAggregatesFilter<"ListingLocation"> | boolean | null
}

export type ListingLocationCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  latitude?: number | null
  longitude?: number | null
  description?: string | null
  noPhysicalLocation?: boolean | null
  listing?: Prisma.ListingCreateNestedOneWithoutLocationInput
  ListingEdit?: Prisma.ListingEditCreateNestedManyWithoutLocationInput
}

export type ListingLocationUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  latitude?: number | null
  longitude?: number | null
  description?: string | null
  noPhysicalLocation?: boolean | null
  listing?: Prisma.ListingUncheckedCreateNestedOneWithoutLocationInput
  ListingEdit?: Prisma.ListingEditUncheckedCreateNestedManyWithoutLocationInput
}

export type ListingLocationUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  noPhysicalLocation?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  listing?: Prisma.ListingUpdateOneWithoutLocationNestedInput
  ListingEdit?: Prisma.ListingEditUpdateManyWithoutLocationNestedInput
}

export type ListingLocationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  noPhysicalLocation?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  listing?: Prisma.ListingUncheckedUpdateOneWithoutLocationNestedInput
  ListingEdit?: Prisma.ListingEditUncheckedUpdateManyWithoutLocationNestedInput
}

export type ListingLocationCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  latitude?: number | null
  longitude?: number | null
  description?: string | null
  noPhysicalLocation?: boolean | null
}

export type ListingLocationUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  noPhysicalLocation?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type ListingLocationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  noPhysicalLocation?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type ListingLocationNullableScalarRelationFilter = {
  is?: Prisma.ListingLocationWhereInput | null
  isNot?: Prisma.ListingLocationWhereInput | null
}

export type ListingLocationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  description?: Prisma.SortOrder
  noPhysicalLocation?: Prisma.SortOrder
}

export type ListingLocationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
}

export type ListingLocationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  description?: Prisma.SortOrder
  noPhysicalLocation?: Prisma.SortOrder
}

export type ListingLocationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  description?: Prisma.SortOrder
  noPhysicalLocation?: Prisma.SortOrder
}

export type ListingLocationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
}

export type ListingLocationCreateNestedOneWithoutListingInput = {
  create?: Prisma.XOR<Prisma.ListingLocationCreateWithoutListingInput, Prisma.ListingLocationUncheckedCreateWithoutListingInput>
  connectOrCreate?: Prisma.ListingLocationCreateOrConnectWithoutListingInput
  connect?: Prisma.ListingLocationWhereUniqueInput
}

export type ListingLocationUpdateOneWithoutListingNestedInput = {
  create?: Prisma.XOR<Prisma.ListingLocationCreateWithoutListingInput, Prisma.ListingLocationUncheckedCreateWithoutListingInput>
  connectOrCreate?: Prisma.ListingLocationCreateOrConnectWithoutListingInput
  upsert?: Prisma.ListingLocationUpsertWithoutListingInput
  disconnect?: Prisma.ListingLocationWhereInput | boolean
  delete?: Prisma.ListingLocationWhereInput | boolean
  connect?: Prisma.ListingLocationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ListingLocationUpdateToOneWithWhereWithoutListingInput, Prisma.ListingLocationUpdateWithoutListingInput>, Prisma.ListingLocationUncheckedUpdateWithoutListingInput>
}

export type ListingLocationCreateNestedOneWithoutListingEditInput = {
  create?: Prisma.XOR<Prisma.ListingLocationCreateWithoutListingEditInput, Prisma.ListingLocationUncheckedCreateWithoutListingEditInput>
  connectOrCreate?: Prisma.ListingLocationCreateOrConnectWithoutListingEditInput
  connect?: Prisma.ListingLocationWhereUniqueInput
}

export type ListingLocationUpdateOneWithoutListingEditNestedInput = {
  create?: Prisma.XOR<Prisma.ListingLocationCreateWithoutListingEditInput, Prisma.ListingLocationUncheckedCreateWithoutListingEditInput>
  connectOrCreate?: Prisma.ListingLocationCreateOrConnectWithoutListingEditInput
  upsert?: Prisma.ListingLocationUpsertWithoutListingEditInput
  disconnect?: Prisma.ListingLocationWhereInput | boolean
  delete?: Prisma.ListingLocationWhereInput | boolean
  connect?: Prisma.ListingLocationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ListingLocationUpdateToOneWithWhereWithoutListingEditInput, Prisma.ListingLocationUpdateWithoutListingEditInput>, Prisma.ListingLocationUncheckedUpdateWithoutListingEditInput>
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ListingLocationCreateWithoutListingInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  latitude?: number | null
  longitude?: number | null
  description?: string | null
  noPhysicalLocation?: boolean | null
  ListingEdit?: Prisma.ListingEditCreateNestedManyWithoutLocationInput
}

export type ListingLocationUncheckedCreateWithoutListingInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  latitude?: number | null
  longitude?: number | null
  description?: string | null
  noPhysicalLocation?: boolean | null
  ListingEdit?: Prisma.ListingEditUncheckedCreateNestedManyWithoutLocationInput
}

export type ListingLocationCreateOrConnectWithoutListingInput = {
  where: Prisma.ListingLocationWhereUniqueInput
  create: Prisma.XOR<Prisma.ListingLocationCreateWithoutListingInput, Prisma.ListingLocationUncheckedCreateWithoutListingInput>
}

export type ListingLocationUpsertWithoutListingInput = {
  update: Prisma.XOR<Prisma.ListingLocationUpdateWithoutListingInput, Prisma.ListingLocationUncheckedUpdateWithoutListingInput>
  create: Prisma.XOR<Prisma.ListingLocationCreateWithoutListingInput, Prisma.ListingLocationUncheckedCreateWithoutListingInput>
  where?: Prisma.ListingLocationWhereInput
}

export type ListingLocationUpdateToOneWithWhereWithoutListingInput = {
  where?: Prisma.ListingLocationWhereInput
  data: Prisma.XOR<Prisma.ListingLocationUpdateWithoutListingInput, Prisma.ListingLocationUncheckedUpdateWithoutListingInput>
}

export type ListingLocationUpdateWithoutListingInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  noPhysicalLocation?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  ListingEdit?: Prisma.ListingEditUpdateManyWithoutLocationNestedInput
}

export type ListingLocationUncheckedUpdateWithoutListingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  noPhysicalLocation?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  ListingEdit?: Prisma.ListingEditUncheckedUpdateManyWithoutLocationNestedInput
}

export type ListingLocationCreateWithoutListingEditInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  latitude?: number | null
  longitude?: number | null
  description?: string | null
  noPhysicalLocation?: boolean | null
  listing?: Prisma.ListingCreateNestedOneWithoutLocationInput
}

export type ListingLocationUncheckedCreateWithoutListingEditInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  latitude?: number | null
  longitude?: number | null
  description?: string | null
  noPhysicalLocation?: boolean | null
  listing?: Prisma.ListingUncheckedCreateNestedOneWithoutLocationInput
}

export type ListingLocationCreateOrConnectWithoutListingEditInput = {
  where: Prisma.ListingLocationWhereUniqueInput
  create: Prisma.XOR<Prisma.ListingLocationCreateWithoutListingEditInput, Prisma.ListingLocationUncheckedCreateWithoutListingEditInput>
}

export type ListingLocationUpsertWithoutListingEditInput = {
  update: Prisma.XOR<Prisma.ListingLocationUpdateWithoutListingEditInput, Prisma.ListingLocationUncheckedUpdateWithoutListingEditInput>
  create: Prisma.XOR<Prisma.ListingLocationCreateWithoutListingEditInput, Prisma.ListingLocationUncheckedCreateWithoutListingEditInput>
  where?: Prisma.ListingLocationWhereInput
}

export type ListingLocationUpdateToOneWithWhereWithoutListingEditInput = {
  where?: Prisma.ListingLocationWhereInput
  data: Prisma.XOR<Prisma.ListingLocationUpdateWithoutListingEditInput, Prisma.ListingLocationUncheckedUpdateWithoutListingEditInput>
}

export type ListingLocationUpdateWithoutListingEditInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  noPhysicalLocation?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  listing?: Prisma.ListingUpdateOneWithoutLocationNestedInput
}

export type ListingLocationUncheckedUpdateWithoutListingEditInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  noPhysicalLocation?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  listing?: Prisma.ListingUncheckedUpdateOneWithoutLocationNestedInput
}


/**
 * Count Type ListingLocationCountOutputType
 */

export type ListingLocationCountOutputType = {
  ListingEdit: number
}

export type ListingLocationCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ListingEdit?: boolean | ListingLocationCountOutputTypeCountListingEditArgs
}

/**
 * ListingLocationCountOutputType without action
 */
export type ListingLocationCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocationCountOutputType
   */
  select?: Prisma.ListingLocationCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ListingLocationCountOutputType without action
 */
export type ListingLocationCountOutputTypeCountListingEditArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ListingEditWhereInput
}


export type ListingLocationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  latitude?: boolean
  longitude?: boolean
  description?: boolean
  noPhysicalLocation?: boolean
  listing?: boolean | Prisma.ListingLocation$listingArgs<ExtArgs>
  ListingEdit?: boolean | Prisma.ListingLocation$ListingEditArgs<ExtArgs>
  _count?: boolean | Prisma.ListingLocationCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["listingLocation"]>

export type ListingLocationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  latitude?: boolean
  longitude?: boolean
  description?: boolean
  noPhysicalLocation?: boolean
}, ExtArgs["result"]["listingLocation"]>

export type ListingLocationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  latitude?: boolean
  longitude?: boolean
  description?: boolean
  noPhysicalLocation?: boolean
}, ExtArgs["result"]["listingLocation"]>

export type ListingLocationSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  latitude?: boolean
  longitude?: boolean
  description?: boolean
  noPhysicalLocation?: boolean
}

export type ListingLocationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "latitude" | "longitude" | "description" | "noPhysicalLocation", ExtArgs["result"]["listingLocation"]>
export type ListingLocationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  listing?: boolean | Prisma.ListingLocation$listingArgs<ExtArgs>
  ListingEdit?: boolean | Prisma.ListingLocation$ListingEditArgs<ExtArgs>
  _count?: boolean | Prisma.ListingLocationCountOutputTypeDefaultArgs<ExtArgs>
}
export type ListingLocationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ListingLocationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ListingLocationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ListingLocation"
  objects: {
    listing: Prisma.$ListingPayload<ExtArgs> | null
    ListingEdit: Prisma.$ListingEditPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    latitude: number | null
    longitude: number | null
    description: string | null
    noPhysicalLocation: boolean | null
  }, ExtArgs["result"]["listingLocation"]>
  composites: {}
}

export type ListingLocationGetPayload<S extends boolean | null | undefined | ListingLocationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ListingLocationPayload, S>

export type ListingLocationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ListingLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ListingLocationCountAggregateInputType | true
  }

export interface ListingLocationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ListingLocation'], meta: { name: 'ListingLocation' } }
  /**
   * Find zero or one ListingLocation that matches the filter.
   * @param {ListingLocationFindUniqueArgs} args - Arguments to find a ListingLocation
   * @example
   * // Get one ListingLocation
   * const listingLocation = await prisma.listingLocation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ListingLocationFindUniqueArgs>(args: Prisma.SelectSubset<T, ListingLocationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ListingLocationClient<runtime.Types.Result.GetResult<Prisma.$ListingLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ListingLocation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ListingLocationFindUniqueOrThrowArgs} args - Arguments to find a ListingLocation
   * @example
   * // Get one ListingLocation
   * const listingLocation = await prisma.listingLocation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ListingLocationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ListingLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ListingLocationClient<runtime.Types.Result.GetResult<Prisma.$ListingLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ListingLocation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingLocationFindFirstArgs} args - Arguments to find a ListingLocation
   * @example
   * // Get one ListingLocation
   * const listingLocation = await prisma.listingLocation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ListingLocationFindFirstArgs>(args?: Prisma.SelectSubset<T, ListingLocationFindFirstArgs<ExtArgs>>): Prisma.Prisma__ListingLocationClient<runtime.Types.Result.GetResult<Prisma.$ListingLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ListingLocation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingLocationFindFirstOrThrowArgs} args - Arguments to find a ListingLocation
   * @example
   * // Get one ListingLocation
   * const listingLocation = await prisma.listingLocation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ListingLocationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ListingLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ListingLocationClient<runtime.Types.Result.GetResult<Prisma.$ListingLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ListingLocations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingLocationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ListingLocations
   * const listingLocations = await prisma.listingLocation.findMany()
   * 
   * // Get first 10 ListingLocations
   * const listingLocations = await prisma.listingLocation.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const listingLocationWithIdOnly = await prisma.listingLocation.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ListingLocationFindManyArgs>(args?: Prisma.SelectSubset<T, ListingLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ListingLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ListingLocation.
   * @param {ListingLocationCreateArgs} args - Arguments to create a ListingLocation.
   * @example
   * // Create one ListingLocation
   * const ListingLocation = await prisma.listingLocation.create({
   *   data: {
   *     // ... data to create a ListingLocation
   *   }
   * })
   * 
   */
  create<T extends ListingLocationCreateArgs>(args: Prisma.SelectSubset<T, ListingLocationCreateArgs<ExtArgs>>): Prisma.Prisma__ListingLocationClient<runtime.Types.Result.GetResult<Prisma.$ListingLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ListingLocations.
   * @param {ListingLocationCreateManyArgs} args - Arguments to create many ListingLocations.
   * @example
   * // Create many ListingLocations
   * const listingLocation = await prisma.listingLocation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ListingLocationCreateManyArgs>(args?: Prisma.SelectSubset<T, ListingLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ListingLocations and returns the data saved in the database.
   * @param {ListingLocationCreateManyAndReturnArgs} args - Arguments to create many ListingLocations.
   * @example
   * // Create many ListingLocations
   * const listingLocation = await prisma.listingLocation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ListingLocations and only return the `id`
   * const listingLocationWithIdOnly = await prisma.listingLocation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ListingLocationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ListingLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ListingLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ListingLocation.
   * @param {ListingLocationDeleteArgs} args - Arguments to delete one ListingLocation.
   * @example
   * // Delete one ListingLocation
   * const ListingLocation = await prisma.listingLocation.delete({
   *   where: {
   *     // ... filter to delete one ListingLocation
   *   }
   * })
   * 
   */
  delete<T extends ListingLocationDeleteArgs>(args: Prisma.SelectSubset<T, ListingLocationDeleteArgs<ExtArgs>>): Prisma.Prisma__ListingLocationClient<runtime.Types.Result.GetResult<Prisma.$ListingLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ListingLocation.
   * @param {ListingLocationUpdateArgs} args - Arguments to update one ListingLocation.
   * @example
   * // Update one ListingLocation
   * const listingLocation = await prisma.listingLocation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ListingLocationUpdateArgs>(args: Prisma.SelectSubset<T, ListingLocationUpdateArgs<ExtArgs>>): Prisma.Prisma__ListingLocationClient<runtime.Types.Result.GetResult<Prisma.$ListingLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ListingLocations.
   * @param {ListingLocationDeleteManyArgs} args - Arguments to filter ListingLocations to delete.
   * @example
   * // Delete a few ListingLocations
   * const { count } = await prisma.listingLocation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ListingLocationDeleteManyArgs>(args?: Prisma.SelectSubset<T, ListingLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ListingLocations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingLocationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ListingLocations
   * const listingLocation = await prisma.listingLocation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ListingLocationUpdateManyArgs>(args: Prisma.SelectSubset<T, ListingLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ListingLocations and returns the data updated in the database.
   * @param {ListingLocationUpdateManyAndReturnArgs} args - Arguments to update many ListingLocations.
   * @example
   * // Update many ListingLocations
   * const listingLocation = await prisma.listingLocation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ListingLocations and only return the `id`
   * const listingLocationWithIdOnly = await prisma.listingLocation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ListingLocationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ListingLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ListingLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ListingLocation.
   * @param {ListingLocationUpsertArgs} args - Arguments to update or create a ListingLocation.
   * @example
   * // Update or create a ListingLocation
   * const listingLocation = await prisma.listingLocation.upsert({
   *   create: {
   *     // ... data to create a ListingLocation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ListingLocation we want to update
   *   }
   * })
   */
  upsert<T extends ListingLocationUpsertArgs>(args: Prisma.SelectSubset<T, ListingLocationUpsertArgs<ExtArgs>>): Prisma.Prisma__ListingLocationClient<runtime.Types.Result.GetResult<Prisma.$ListingLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ListingLocations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingLocationCountArgs} args - Arguments to filter ListingLocations to count.
   * @example
   * // Count the number of ListingLocations
   * const count = await prisma.listingLocation.count({
   *   where: {
   *     // ... the filter for the ListingLocations we want to count
   *   }
   * })
  **/
  count<T extends ListingLocationCountArgs>(
    args?: Prisma.Subset<T, ListingLocationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ListingLocationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ListingLocation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ListingLocationAggregateArgs>(args: Prisma.Subset<T, ListingLocationAggregateArgs>): Prisma.PrismaPromise<GetListingLocationAggregateType<T>>

  /**
   * Group by ListingLocation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingLocationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ListingLocationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ListingLocationGroupByArgs['orderBy'] }
      : { orderBy?: ListingLocationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ListingLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListingLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ListingLocation model
 */
readonly fields: ListingLocationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ListingLocation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ListingLocationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  listing<T extends Prisma.ListingLocation$listingArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ListingLocation$listingArgs<ExtArgs>>): Prisma.Prisma__ListingClient<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  ListingEdit<T extends Prisma.ListingLocation$ListingEditArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ListingLocation$ListingEditArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ListingEditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ListingLocation model
 */
export interface ListingLocationFieldRefs {
  readonly id: Prisma.FieldRef<"ListingLocation", 'Int'>
  readonly createdAt: Prisma.FieldRef<"ListingLocation", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ListingLocation", 'DateTime'>
  readonly latitude: Prisma.FieldRef<"ListingLocation", 'Float'>
  readonly longitude: Prisma.FieldRef<"ListingLocation", 'Float'>
  readonly description: Prisma.FieldRef<"ListingLocation", 'String'>
  readonly noPhysicalLocation: Prisma.FieldRef<"ListingLocation", 'Boolean'>
}
    

// Custom InputTypes
/**
 * ListingLocation findUnique
 */
export type ListingLocationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocation
   */
  select?: Prisma.ListingLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingLocation
   */
  omit?: Prisma.ListingLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingLocationInclude<ExtArgs> | null
  /**
   * Filter, which ListingLocation to fetch.
   */
  where: Prisma.ListingLocationWhereUniqueInput
}

/**
 * ListingLocation findUniqueOrThrow
 */
export type ListingLocationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocation
   */
  select?: Prisma.ListingLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingLocation
   */
  omit?: Prisma.ListingLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingLocationInclude<ExtArgs> | null
  /**
   * Filter, which ListingLocation to fetch.
   */
  where: Prisma.ListingLocationWhereUniqueInput
}

/**
 * ListingLocation findFirst
 */
export type ListingLocationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocation
   */
  select?: Prisma.ListingLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingLocation
   */
  omit?: Prisma.ListingLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingLocationInclude<ExtArgs> | null
  /**
   * Filter, which ListingLocation to fetch.
   */
  where?: Prisma.ListingLocationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ListingLocations to fetch.
   */
  orderBy?: Prisma.ListingLocationOrderByWithRelationInput | Prisma.ListingLocationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ListingLocations.
   */
  cursor?: Prisma.ListingLocationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ListingLocations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ListingLocations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ListingLocations.
   */
  distinct?: Prisma.ListingLocationScalarFieldEnum | Prisma.ListingLocationScalarFieldEnum[]
}

/**
 * ListingLocation findFirstOrThrow
 */
export type ListingLocationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocation
   */
  select?: Prisma.ListingLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingLocation
   */
  omit?: Prisma.ListingLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingLocationInclude<ExtArgs> | null
  /**
   * Filter, which ListingLocation to fetch.
   */
  where?: Prisma.ListingLocationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ListingLocations to fetch.
   */
  orderBy?: Prisma.ListingLocationOrderByWithRelationInput | Prisma.ListingLocationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ListingLocations.
   */
  cursor?: Prisma.ListingLocationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ListingLocations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ListingLocations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ListingLocations.
   */
  distinct?: Prisma.ListingLocationScalarFieldEnum | Prisma.ListingLocationScalarFieldEnum[]
}

/**
 * ListingLocation findMany
 */
export type ListingLocationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocation
   */
  select?: Prisma.ListingLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingLocation
   */
  omit?: Prisma.ListingLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingLocationInclude<ExtArgs> | null
  /**
   * Filter, which ListingLocations to fetch.
   */
  where?: Prisma.ListingLocationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ListingLocations to fetch.
   */
  orderBy?: Prisma.ListingLocationOrderByWithRelationInput | Prisma.ListingLocationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ListingLocations.
   */
  cursor?: Prisma.ListingLocationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ListingLocations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ListingLocations.
   */
  skip?: number
  distinct?: Prisma.ListingLocationScalarFieldEnum | Prisma.ListingLocationScalarFieldEnum[]
}

/**
 * ListingLocation create
 */
export type ListingLocationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocation
   */
  select?: Prisma.ListingLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingLocation
   */
  omit?: Prisma.ListingLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingLocationInclude<ExtArgs> | null
  /**
   * The data needed to create a ListingLocation.
   */
  data?: Prisma.XOR<Prisma.ListingLocationCreateInput, Prisma.ListingLocationUncheckedCreateInput>
}

/**
 * ListingLocation createMany
 */
export type ListingLocationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ListingLocations.
   */
  data: Prisma.ListingLocationCreateManyInput | Prisma.ListingLocationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ListingLocation createManyAndReturn
 */
export type ListingLocationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocation
   */
  select?: Prisma.ListingLocationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ListingLocation
   */
  omit?: Prisma.ListingLocationOmit<ExtArgs> | null
  /**
   * The data used to create many ListingLocations.
   */
  data: Prisma.ListingLocationCreateManyInput | Prisma.ListingLocationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ListingLocation update
 */
export type ListingLocationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocation
   */
  select?: Prisma.ListingLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingLocation
   */
  omit?: Prisma.ListingLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingLocationInclude<ExtArgs> | null
  /**
   * The data needed to update a ListingLocation.
   */
  data: Prisma.XOR<Prisma.ListingLocationUpdateInput, Prisma.ListingLocationUncheckedUpdateInput>
  /**
   * Choose, which ListingLocation to update.
   */
  where: Prisma.ListingLocationWhereUniqueInput
}

/**
 * ListingLocation updateMany
 */
export type ListingLocationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ListingLocations.
   */
  data: Prisma.XOR<Prisma.ListingLocationUpdateManyMutationInput, Prisma.ListingLocationUncheckedUpdateManyInput>
  /**
   * Filter which ListingLocations to update
   */
  where?: Prisma.ListingLocationWhereInput
  /**
   * Limit how many ListingLocations to update.
   */
  limit?: number
}

/**
 * ListingLocation updateManyAndReturn
 */
export type ListingLocationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocation
   */
  select?: Prisma.ListingLocationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ListingLocation
   */
  omit?: Prisma.ListingLocationOmit<ExtArgs> | null
  /**
   * The data used to update ListingLocations.
   */
  data: Prisma.XOR<Prisma.ListingLocationUpdateManyMutationInput, Prisma.ListingLocationUncheckedUpdateManyInput>
  /**
   * Filter which ListingLocations to update
   */
  where?: Prisma.ListingLocationWhereInput
  /**
   * Limit how many ListingLocations to update.
   */
  limit?: number
}

/**
 * ListingLocation upsert
 */
export type ListingLocationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocation
   */
  select?: Prisma.ListingLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingLocation
   */
  omit?: Prisma.ListingLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingLocationInclude<ExtArgs> | null
  /**
   * The filter to search for the ListingLocation to update in case it exists.
   */
  where: Prisma.ListingLocationWhereUniqueInput
  /**
   * In case the ListingLocation found by the `where` argument doesn't exist, create a new ListingLocation with this data.
   */
  create: Prisma.XOR<Prisma.ListingLocationCreateInput, Prisma.ListingLocationUncheckedCreateInput>
  /**
   * In case the ListingLocation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ListingLocationUpdateInput, Prisma.ListingLocationUncheckedUpdateInput>
}

/**
 * ListingLocation delete
 */
export type ListingLocationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocation
   */
  select?: Prisma.ListingLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingLocation
   */
  omit?: Prisma.ListingLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingLocationInclude<ExtArgs> | null
  /**
   * Filter which ListingLocation to delete.
   */
  where: Prisma.ListingLocationWhereUniqueInput
}

/**
 * ListingLocation deleteMany
 */
export type ListingLocationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ListingLocations to delete
   */
  where?: Prisma.ListingLocationWhereInput
  /**
   * Limit how many ListingLocations to delete.
   */
  limit?: number
}

/**
 * ListingLocation.listing
 */
export type ListingLocation$listingArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingInclude<ExtArgs> | null
  where?: Prisma.ListingWhereInput
}

/**
 * ListingLocation.ListingEdit
 */
export type ListingLocation$ListingEditArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingEdit
   */
  select?: Prisma.ListingEditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingEdit
   */
  omit?: Prisma.ListingEditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingEditInclude<ExtArgs> | null
  where?: Prisma.ListingEditWhereInput
  orderBy?: Prisma.ListingEditOrderByWithRelationInput | Prisma.ListingEditOrderByWithRelationInput[]
  cursor?: Prisma.ListingEditWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ListingEditScalarFieldEnum | Prisma.ListingEditScalarFieldEnum[]
}

/**
 * ListingLocation without action
 */
export type ListingLocationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ListingLocation
   */
  select?: Prisma.ListingLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ListingLocation
   */
  omit?: Prisma.ListingLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingLocationInclude<ExtArgs> | null
}
