
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `WebLocation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model WebLocation
 * 
 */
export type WebLocationModel = runtime.Types.Result.DefaultSelection<Prisma.$WebLocationPayload>

export type AggregateWebLocation = {
  _count: WebLocationCountAggregateOutputType | null
  _avg: WebLocationAvgAggregateOutputType | null
  _sum: WebLocationSumAggregateOutputType | null
  _min: WebLocationMinAggregateOutputType | null
  _max: WebLocationMaxAggregateOutputType | null
}

export type WebLocationAvgAggregateOutputType = {
  id: number | null
  latitude: number | null
  longitude: number | null
}

export type WebLocationSumAggregateOutputType = {
  id: number | null
  latitude: number | null
  longitude: number | null
}

export type WebLocationMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  latitude: number | null
  longitude: number | null
  description: string | null
}

export type WebLocationMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  latitude: number | null
  longitude: number | null
  description: string | null
}

export type WebLocationCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  latitude: number
  longitude: number
  description: number
  _all: number
}


export type WebLocationAvgAggregateInputType = {
  id?: true
  latitude?: true
  longitude?: true
}

export type WebLocationSumAggregateInputType = {
  id?: true
  latitude?: true
  longitude?: true
}

export type WebLocationMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  latitude?: true
  longitude?: true
  description?: true
}

export type WebLocationMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  latitude?: true
  longitude?: true
  description?: true
}

export type WebLocationCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  latitude?: true
  longitude?: true
  description?: true
  _all?: true
}

export type WebLocationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WebLocation to aggregate.
   */
  where?: Prisma.WebLocationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebLocations to fetch.
   */
  orderBy?: Prisma.WebLocationOrderByWithRelationInput | Prisma.WebLocationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WebLocationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebLocations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebLocations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WebLocations
  **/
  _count?: true | WebLocationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WebLocationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WebLocationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WebLocationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WebLocationMaxAggregateInputType
}

export type GetWebLocationAggregateType<T extends WebLocationAggregateArgs> = {
      [P in keyof T & keyof AggregateWebLocation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWebLocation[P]>
    : Prisma.GetScalarType<T[P], AggregateWebLocation[P]>
}




export type WebLocationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WebLocationWhereInput
  orderBy?: Prisma.WebLocationOrderByWithAggregationInput | Prisma.WebLocationOrderByWithAggregationInput[]
  by: Prisma.WebLocationScalarFieldEnum[] | Prisma.WebLocationScalarFieldEnum
  having?: Prisma.WebLocationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WebLocationCountAggregateInputType | true
  _avg?: WebLocationAvgAggregateInputType
  _sum?: WebLocationSumAggregateInputType
  _min?: WebLocationMinAggregateInputType
  _max?: WebLocationMaxAggregateInputType
}

export type WebLocationGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  latitude: number | null
  longitude: number | null
  description: string | null
  _count: WebLocationCountAggregateOutputType | null
  _avg: WebLocationAvgAggregateOutputType | null
  _sum: WebLocationSumAggregateOutputType | null
  _min: WebLocationMinAggregateOutputType | null
  _max: WebLocationMaxAggregateOutputType | null
}

type GetWebLocationGroupByPayload<T extends WebLocationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WebLocationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WebLocationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WebLocationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WebLocationGroupByOutputType[P]>
      }
    >
  >



export type WebLocationWhereInput = {
  AND?: Prisma.WebLocationWhereInput | Prisma.WebLocationWhereInput[]
  OR?: Prisma.WebLocationWhereInput[]
  NOT?: Prisma.WebLocationWhereInput | Prisma.WebLocationWhereInput[]
  id?: Prisma.IntFilter<"WebLocation"> | number
  createdAt?: Prisma.DateTimeFilter<"WebLocation"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WebLocation"> | Date | string
  latitude?: Prisma.FloatNullableFilter<"WebLocation"> | number | null
  longitude?: Prisma.FloatNullableFilter<"WebLocation"> | number | null
  description?: Prisma.StringNullableFilter<"WebLocation"> | string | null
  web?: Prisma.XOR<Prisma.WebNullableScalarRelationFilter, Prisma.WebWhereInput> | null
}

export type WebLocationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  latitude?: Prisma.SortOrderInput | Prisma.SortOrder
  longitude?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  web?: Prisma.WebOrderByWithRelationInput
}

export type WebLocationWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.WebLocationWhereInput | Prisma.WebLocationWhereInput[]
  OR?: Prisma.WebLocationWhereInput[]
  NOT?: Prisma.WebLocationWhereInput | Prisma.WebLocationWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"WebLocation"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WebLocation"> | Date | string
  latitude?: Prisma.FloatNullableFilter<"WebLocation"> | number | null
  longitude?: Prisma.FloatNullableFilter<"WebLocation"> | number | null
  description?: Prisma.StringNullableFilter<"WebLocation"> | string | null
  web?: Prisma.XOR<Prisma.WebNullableScalarRelationFilter, Prisma.WebWhereInput> | null
}, "id">

export type WebLocationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  latitude?: Prisma.SortOrderInput | Prisma.SortOrder
  longitude?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.WebLocationCountOrderByAggregateInput
  _avg?: Prisma.WebLocationAvgOrderByAggregateInput
  _max?: Prisma.WebLocationMaxOrderByAggregateInput
  _min?: Prisma.WebLocationMinOrderByAggregateInput
  _sum?: Prisma.WebLocationSumOrderByAggregateInput
}

export type WebLocationScalarWhereWithAggregatesInput = {
  AND?: Prisma.WebLocationScalarWhereWithAggregatesInput | Prisma.WebLocationScalarWhereWithAggregatesInput[]
  OR?: Prisma.WebLocationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WebLocationScalarWhereWithAggregatesInput | Prisma.WebLocationScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"WebLocation"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WebLocation"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WebLocation"> | Date | string
  latitude?: Prisma.FloatNullableWithAggregatesFilter<"WebLocation"> | number | null
  longitude?: Prisma.FloatNullableWithAggregatesFilter<"WebLocation"> | number | null
  description?: Prisma.StringNullableWithAggregatesFilter<"WebLocation"> | string | null
}

export type WebLocationCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  latitude?: number | null
  longitude?: number | null
  description?: string | null
  web?: Prisma.WebCreateNestedOneWithoutLocationInput
}

export type WebLocationUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  latitude?: number | null
  longitude?: number | null
  description?: string | null
  web?: Prisma.WebUncheckedCreateNestedOneWithoutLocationInput
}

export type WebLocationUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  web?: Prisma.WebUpdateOneWithoutLocationNestedInput
}

export type WebLocationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  web?: Prisma.WebUncheckedUpdateOneWithoutLocationNestedInput
}

export type WebLocationCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  latitude?: number | null
  longitude?: number | null
  description?: string | null
}

export type WebLocationUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WebLocationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WebLocationNullableScalarRelationFilter = {
  is?: Prisma.WebLocationWhereInput | null
  isNot?: Prisma.WebLocationWhereInput | null
}

export type WebLocationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type WebLocationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
}

export type WebLocationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type WebLocationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type WebLocationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
}

export type WebLocationCreateNestedOneWithoutWebInput = {
  create?: Prisma.XOR<Prisma.WebLocationCreateWithoutWebInput, Prisma.WebLocationUncheckedCreateWithoutWebInput>
  connectOrCreate?: Prisma.WebLocationCreateOrConnectWithoutWebInput
  connect?: Prisma.WebLocationWhereUniqueInput
}

export type WebLocationUpdateOneWithoutWebNestedInput = {
  create?: Prisma.XOR<Prisma.WebLocationCreateWithoutWebInput, Prisma.WebLocationUncheckedCreateWithoutWebInput>
  connectOrCreate?: Prisma.WebLocationCreateOrConnectWithoutWebInput
  upsert?: Prisma.WebLocationUpsertWithoutWebInput
  disconnect?: Prisma.WebLocationWhereInput | boolean
  delete?: Prisma.WebLocationWhereInput | boolean
  connect?: Prisma.WebLocationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WebLocationUpdateToOneWithWhereWithoutWebInput, Prisma.WebLocationUpdateWithoutWebInput>, Prisma.WebLocationUncheckedUpdateWithoutWebInput>
}

export type WebLocationCreateWithoutWebInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  latitude?: number | null
  longitude?: number | null
  description?: string | null
}

export type WebLocationUncheckedCreateWithoutWebInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  latitude?: number | null
  longitude?: number | null
  description?: string | null
}

export type WebLocationCreateOrConnectWithoutWebInput = {
  where: Prisma.WebLocationWhereUniqueInput
  create: Prisma.XOR<Prisma.WebLocationCreateWithoutWebInput, Prisma.WebLocationUncheckedCreateWithoutWebInput>
}

export type WebLocationUpsertWithoutWebInput = {
  update: Prisma.XOR<Prisma.WebLocationUpdateWithoutWebInput, Prisma.WebLocationUncheckedUpdateWithoutWebInput>
  create: Prisma.XOR<Prisma.WebLocationCreateWithoutWebInput, Prisma.WebLocationUncheckedCreateWithoutWebInput>
  where?: Prisma.WebLocationWhereInput
}

export type WebLocationUpdateToOneWithWhereWithoutWebInput = {
  where?: Prisma.WebLocationWhereInput
  data: Prisma.XOR<Prisma.WebLocationUpdateWithoutWebInput, Prisma.WebLocationUncheckedUpdateWithoutWebInput>
}

export type WebLocationUpdateWithoutWebInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WebLocationUncheckedUpdateWithoutWebInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  latitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  longitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type WebLocationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  latitude?: boolean
  longitude?: boolean
  description?: boolean
  web?: boolean | Prisma.WebLocation$webArgs<ExtArgs>
}, ExtArgs["result"]["webLocation"]>

export type WebLocationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  latitude?: boolean
  longitude?: boolean
  description?: boolean
}, ExtArgs["result"]["webLocation"]>

export type WebLocationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  latitude?: boolean
  longitude?: boolean
  description?: boolean
}, ExtArgs["result"]["webLocation"]>

export type WebLocationSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  latitude?: boolean
  longitude?: boolean
  description?: boolean
}

export type WebLocationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "latitude" | "longitude" | "description", ExtArgs["result"]["webLocation"]>
export type WebLocationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  web?: boolean | Prisma.WebLocation$webArgs<ExtArgs>
}
export type WebLocationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type WebLocationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $WebLocationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WebLocation"
  objects: {
    web: Prisma.$WebPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    latitude: number | null
    longitude: number | null
    description: string | null
  }, ExtArgs["result"]["webLocation"]>
  composites: {}
}

export type WebLocationGetPayload<S extends boolean | null | undefined | WebLocationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WebLocationPayload, S>

export type WebLocationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WebLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WebLocationCountAggregateInputType | true
  }

export interface WebLocationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebLocation'], meta: { name: 'WebLocation' } }
  /**
   * Find zero or one WebLocation that matches the filter.
   * @param {WebLocationFindUniqueArgs} args - Arguments to find a WebLocation
   * @example
   * // Get one WebLocation
   * const webLocation = await prisma.webLocation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WebLocationFindUniqueArgs>(args: Prisma.SelectSubset<T, WebLocationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WebLocationClient<runtime.Types.Result.GetResult<Prisma.$WebLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WebLocation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WebLocationFindUniqueOrThrowArgs} args - Arguments to find a WebLocation
   * @example
   * // Get one WebLocation
   * const webLocation = await prisma.webLocation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WebLocationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WebLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WebLocationClient<runtime.Types.Result.GetResult<Prisma.$WebLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WebLocation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebLocationFindFirstArgs} args - Arguments to find a WebLocation
   * @example
   * // Get one WebLocation
   * const webLocation = await prisma.webLocation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WebLocationFindFirstArgs>(args?: Prisma.SelectSubset<T, WebLocationFindFirstArgs<ExtArgs>>): Prisma.Prisma__WebLocationClient<runtime.Types.Result.GetResult<Prisma.$WebLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WebLocation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebLocationFindFirstOrThrowArgs} args - Arguments to find a WebLocation
   * @example
   * // Get one WebLocation
   * const webLocation = await prisma.webLocation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WebLocationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WebLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WebLocationClient<runtime.Types.Result.GetResult<Prisma.$WebLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WebLocations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebLocationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WebLocations
   * const webLocations = await prisma.webLocation.findMany()
   * 
   * // Get first 10 WebLocations
   * const webLocations = await prisma.webLocation.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const webLocationWithIdOnly = await prisma.webLocation.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WebLocationFindManyArgs>(args?: Prisma.SelectSubset<T, WebLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WebLocation.
   * @param {WebLocationCreateArgs} args - Arguments to create a WebLocation.
   * @example
   * // Create one WebLocation
   * const WebLocation = await prisma.webLocation.create({
   *   data: {
   *     // ... data to create a WebLocation
   *   }
   * })
   * 
   */
  create<T extends WebLocationCreateArgs>(args: Prisma.SelectSubset<T, WebLocationCreateArgs<ExtArgs>>): Prisma.Prisma__WebLocationClient<runtime.Types.Result.GetResult<Prisma.$WebLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WebLocations.
   * @param {WebLocationCreateManyArgs} args - Arguments to create many WebLocations.
   * @example
   * // Create many WebLocations
   * const webLocation = await prisma.webLocation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WebLocationCreateManyArgs>(args?: Prisma.SelectSubset<T, WebLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WebLocations and returns the data saved in the database.
   * @param {WebLocationCreateManyAndReturnArgs} args - Arguments to create many WebLocations.
   * @example
   * // Create many WebLocations
   * const webLocation = await prisma.webLocation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WebLocations and only return the `id`
   * const webLocationWithIdOnly = await prisma.webLocation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WebLocationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WebLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WebLocation.
   * @param {WebLocationDeleteArgs} args - Arguments to delete one WebLocation.
   * @example
   * // Delete one WebLocation
   * const WebLocation = await prisma.webLocation.delete({
   *   where: {
   *     // ... filter to delete one WebLocation
   *   }
   * })
   * 
   */
  delete<T extends WebLocationDeleteArgs>(args: Prisma.SelectSubset<T, WebLocationDeleteArgs<ExtArgs>>): Prisma.Prisma__WebLocationClient<runtime.Types.Result.GetResult<Prisma.$WebLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WebLocation.
   * @param {WebLocationUpdateArgs} args - Arguments to update one WebLocation.
   * @example
   * // Update one WebLocation
   * const webLocation = await prisma.webLocation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WebLocationUpdateArgs>(args: Prisma.SelectSubset<T, WebLocationUpdateArgs<ExtArgs>>): Prisma.Prisma__WebLocationClient<runtime.Types.Result.GetResult<Prisma.$WebLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WebLocations.
   * @param {WebLocationDeleteManyArgs} args - Arguments to filter WebLocations to delete.
   * @example
   * // Delete a few WebLocations
   * const { count } = await prisma.webLocation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WebLocationDeleteManyArgs>(args?: Prisma.SelectSubset<T, WebLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WebLocations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebLocationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WebLocations
   * const webLocation = await prisma.webLocation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WebLocationUpdateManyArgs>(args: Prisma.SelectSubset<T, WebLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WebLocations and returns the data updated in the database.
   * @param {WebLocationUpdateManyAndReturnArgs} args - Arguments to update many WebLocations.
   * @example
   * // Update many WebLocations
   * const webLocation = await prisma.webLocation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WebLocations and only return the `id`
   * const webLocationWithIdOnly = await prisma.webLocation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WebLocationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WebLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WebLocation.
   * @param {WebLocationUpsertArgs} args - Arguments to update or create a WebLocation.
   * @example
   * // Update or create a WebLocation
   * const webLocation = await prisma.webLocation.upsert({
   *   create: {
   *     // ... data to create a WebLocation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WebLocation we want to update
   *   }
   * })
   */
  upsert<T extends WebLocationUpsertArgs>(args: Prisma.SelectSubset<T, WebLocationUpsertArgs<ExtArgs>>): Prisma.Prisma__WebLocationClient<runtime.Types.Result.GetResult<Prisma.$WebLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WebLocations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebLocationCountArgs} args - Arguments to filter WebLocations to count.
   * @example
   * // Count the number of WebLocations
   * const count = await prisma.webLocation.count({
   *   where: {
   *     // ... the filter for the WebLocations we want to count
   *   }
   * })
  **/
  count<T extends WebLocationCountArgs>(
    args?: Prisma.Subset<T, WebLocationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WebLocationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WebLocation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WebLocationAggregateArgs>(args: Prisma.Subset<T, WebLocationAggregateArgs>): Prisma.PrismaPromise<GetWebLocationAggregateType<T>>

  /**
   * Group by WebLocation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebLocationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WebLocationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WebLocationGroupByArgs['orderBy'] }
      : { orderBy?: WebLocationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WebLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WebLocation model
 */
readonly fields: WebLocationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WebLocation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WebLocationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  web<T extends Prisma.WebLocation$webArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WebLocation$webArgs<ExtArgs>>): Prisma.Prisma__WebClient<runtime.Types.Result.GetResult<Prisma.$WebPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WebLocation model
 */
export interface WebLocationFieldRefs {
  readonly id: Prisma.FieldRef<"WebLocation", 'Int'>
  readonly createdAt: Prisma.FieldRef<"WebLocation", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WebLocation", 'DateTime'>
  readonly latitude: Prisma.FieldRef<"WebLocation", 'Float'>
  readonly longitude: Prisma.FieldRef<"WebLocation", 'Float'>
  readonly description: Prisma.FieldRef<"WebLocation", 'String'>
}
    

// Custom InputTypes
/**
 * WebLocation findUnique
 */
export type WebLocationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebLocation
   */
  select?: Prisma.WebLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebLocation
   */
  omit?: Prisma.WebLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebLocationInclude<ExtArgs> | null
  /**
   * Filter, which WebLocation to fetch.
   */
  where: Prisma.WebLocationWhereUniqueInput
}

/**
 * WebLocation findUniqueOrThrow
 */
export type WebLocationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebLocation
   */
  select?: Prisma.WebLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebLocation
   */
  omit?: Prisma.WebLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebLocationInclude<ExtArgs> | null
  /**
   * Filter, which WebLocation to fetch.
   */
  where: Prisma.WebLocationWhereUniqueInput
}

/**
 * WebLocation findFirst
 */
export type WebLocationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebLocation
   */
  select?: Prisma.WebLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebLocation
   */
  omit?: Prisma.WebLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebLocationInclude<ExtArgs> | null
  /**
   * Filter, which WebLocation to fetch.
   */
  where?: Prisma.WebLocationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebLocations to fetch.
   */
  orderBy?: Prisma.WebLocationOrderByWithRelationInput | Prisma.WebLocationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WebLocations.
   */
  cursor?: Prisma.WebLocationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebLocations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebLocations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WebLocations.
   */
  distinct?: Prisma.WebLocationScalarFieldEnum | Prisma.WebLocationScalarFieldEnum[]
}

/**
 * WebLocation findFirstOrThrow
 */
export type WebLocationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebLocation
   */
  select?: Prisma.WebLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebLocation
   */
  omit?: Prisma.WebLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebLocationInclude<ExtArgs> | null
  /**
   * Filter, which WebLocation to fetch.
   */
  where?: Prisma.WebLocationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebLocations to fetch.
   */
  orderBy?: Prisma.WebLocationOrderByWithRelationInput | Prisma.WebLocationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WebLocations.
   */
  cursor?: Prisma.WebLocationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebLocations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebLocations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WebLocations.
   */
  distinct?: Prisma.WebLocationScalarFieldEnum | Prisma.WebLocationScalarFieldEnum[]
}

/**
 * WebLocation findMany
 */
export type WebLocationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebLocation
   */
  select?: Prisma.WebLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebLocation
   */
  omit?: Prisma.WebLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebLocationInclude<ExtArgs> | null
  /**
   * Filter, which WebLocations to fetch.
   */
  where?: Prisma.WebLocationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WebLocations to fetch.
   */
  orderBy?: Prisma.WebLocationOrderByWithRelationInput | Prisma.WebLocationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WebLocations.
   */
  cursor?: Prisma.WebLocationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WebLocations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WebLocations.
   */
  skip?: number
  distinct?: Prisma.WebLocationScalarFieldEnum | Prisma.WebLocationScalarFieldEnum[]
}

/**
 * WebLocation create
 */
export type WebLocationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebLocation
   */
  select?: Prisma.WebLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebLocation
   */
  omit?: Prisma.WebLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebLocationInclude<ExtArgs> | null
  /**
   * The data needed to create a WebLocation.
   */
  data?: Prisma.XOR<Prisma.WebLocationCreateInput, Prisma.WebLocationUncheckedCreateInput>
}

/**
 * WebLocation createMany
 */
export type WebLocationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WebLocations.
   */
  data: Prisma.WebLocationCreateManyInput | Prisma.WebLocationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WebLocation createManyAndReturn
 */
export type WebLocationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebLocation
   */
  select?: Prisma.WebLocationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WebLocation
   */
  omit?: Prisma.WebLocationOmit<ExtArgs> | null
  /**
   * The data used to create many WebLocations.
   */
  data: Prisma.WebLocationCreateManyInput | Prisma.WebLocationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WebLocation update
 */
export type WebLocationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebLocation
   */
  select?: Prisma.WebLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebLocation
   */
  omit?: Prisma.WebLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebLocationInclude<ExtArgs> | null
  /**
   * The data needed to update a WebLocation.
   */
  data: Prisma.XOR<Prisma.WebLocationUpdateInput, Prisma.WebLocationUncheckedUpdateInput>
  /**
   * Choose, which WebLocation to update.
   */
  where: Prisma.WebLocationWhereUniqueInput
}

/**
 * WebLocation updateMany
 */
export type WebLocationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WebLocations.
   */
  data: Prisma.XOR<Prisma.WebLocationUpdateManyMutationInput, Prisma.WebLocationUncheckedUpdateManyInput>
  /**
   * Filter which WebLocations to update
   */
  where?: Prisma.WebLocationWhereInput
  /**
   * Limit how many WebLocations to update.
   */
  limit?: number
}

/**
 * WebLocation updateManyAndReturn
 */
export type WebLocationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebLocation
   */
  select?: Prisma.WebLocationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WebLocation
   */
  omit?: Prisma.WebLocationOmit<ExtArgs> | null
  /**
   * The data used to update WebLocations.
   */
  data: Prisma.XOR<Prisma.WebLocationUpdateManyMutationInput, Prisma.WebLocationUncheckedUpdateManyInput>
  /**
   * Filter which WebLocations to update
   */
  where?: Prisma.WebLocationWhereInput
  /**
   * Limit how many WebLocations to update.
   */
  limit?: number
}

/**
 * WebLocation upsert
 */
export type WebLocationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebLocation
   */
  select?: Prisma.WebLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebLocation
   */
  omit?: Prisma.WebLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebLocationInclude<ExtArgs> | null
  /**
   * The filter to search for the WebLocation to update in case it exists.
   */
  where: Prisma.WebLocationWhereUniqueInput
  /**
   * In case the WebLocation found by the `where` argument doesn't exist, create a new WebLocation with this data.
   */
  create: Prisma.XOR<Prisma.WebLocationCreateInput, Prisma.WebLocationUncheckedCreateInput>
  /**
   * In case the WebLocation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WebLocationUpdateInput, Prisma.WebLocationUncheckedUpdateInput>
}

/**
 * WebLocation delete
 */
export type WebLocationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebLocation
   */
  select?: Prisma.WebLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebLocation
   */
  omit?: Prisma.WebLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebLocationInclude<ExtArgs> | null
  /**
   * Filter which WebLocation to delete.
   */
  where: Prisma.WebLocationWhereUniqueInput
}

/**
 * WebLocation deleteMany
 */
export type WebLocationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WebLocations to delete
   */
  where?: Prisma.WebLocationWhereInput
  /**
   * Limit how many WebLocations to delete.
   */
  limit?: number
}

/**
 * WebLocation.web
 */
export type WebLocation$webArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Web
   */
  select?: Prisma.WebSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Web
   */
  omit?: Prisma.WebOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebInclude<ExtArgs> | null
  where?: Prisma.WebWhereInput
}

/**
 * WebLocation without action
 */
export type WebLocationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WebLocation
   */
  select?: Prisma.WebLocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WebLocation
   */
  omit?: Prisma.WebLocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebLocationInclude<ExtArgs> | null
}
