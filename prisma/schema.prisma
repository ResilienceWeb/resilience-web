generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  provider          String    @map("provider_id")
  providerAccountId String    @map("provider_account_id")
  refreshToken      String?   @map("refresh_token")
  accessToken       String?   @map("access_token")
  expires_in        DateTime? @map("access_token_expires")
  expires_at        Int?
  id_token          String?
  scope             String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([providerAccountId], map: "providerAccountId")
  @@index([userId], map: "userId")
  @@map("accounts")
}

model User {
  id               String        @id @default(cuid())
  name             String?
  email            String?       @unique(map: "users.email_unique")
  emailVerified    Boolean       @default(true) @map("email_verified")
  image            String?
  admin            Boolean       @default(false)
  accounts         Account[]
  sessions         Session[]
  permission       Permission[]
  ownerships       Ownership[]
  ListingEdit      ListingEdit[]
  proposedListings Listing[]
  role             String        @default("user")
  banned           Boolean       @default(false)
  banReason        String?
  banExpires       DateTime?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime
  ipAddress    String?
  userAgent    String?
  sessionToken String?  @unique @map("session_token")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verifications")
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "verification_requests.token_unique")
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_requests")
}

model Web {
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at")
  id           Int          @id @default(autoincrement())
  title        String       @unique
  slug         String       @unique
  description  String?
  contactEmail String?      @map("contact_email")
  categories   Category[]
  listings     Listing[]
  tags         Tag[]
  published    Boolean      @default(false)
  image        String?
  permissions  Permission[]
  ownerships   Ownership[]
  features     WebFeature[]
  relations    Web[]        @relation("related_webs")
  relationOf   Web[]        @relation("related_webs")
  location     WebLocation? @relation(fields: [locationId], references: [id])
  locationId   Int?         @unique

  @@map("Location")
}

model Category {
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at")
  label       String
  color       String        @default("f1f1f1")
  icon        String        @default("default")
  id          Int           @id @default(autoincrement())
  webId       Int?
  web         Web?          @relation(fields: [webId], references: [id])
  listings    Listing[]
  ListingEdit ListingEdit[]

  @@unique([webId, label], name: "categoryIdentifier")
  @@map("categories")
}

model Tag {
  id            Int          @id @default(autoincrement())
  label         String
  webId         Int?
  web           Web?         @relation(fields: [webId], references: [id])
  listings      Listing[]
  ListingEdit   ListingEdit? @relation(fields: [listingEditId], references: [id])
  listingEditId Int?

  @@unique([webId, label], name: "tagIdentifier")
  @@map("tags")
}

model Listing {
  id                Int                  @id @default(autoincrement())
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @default(now()) @updatedAt @map("updated_at")
  title             String
  website           String?
  description       String?
  socials           ListingSocialMedia[]
  email             String?
  notes             String?
  inactive          Boolean              @default(false)
  seekingVolunteers Boolean?             @map("seeking_volunteers")
  categoryId        Int?
  image             String?
  slug              String
  webId             Int
  web               Web?                 @relation(fields: [webId], references: [id])
  category          Category?            @relation(fields: [categoryId], references: [id])
  permissions       Permission[]
  tags              Tag[]
  relations         Listing[]            @relation("related")
  relationOf        Listing[]            @relation("related")
  pending           Boolean              @default(false)
  proposer          User?                @relation(fields: [proposerId], references: [id])
  proposerId        String?
  featured          Boolean              @default(false)
  location          ListingLocation?     @relation(fields: [locationId], references: [id])
  locationId        Int?                 @unique
  edits             ListingEdit[]

  @@unique([webId, slug])
  @@map("listings")
}

model ListingSocialMedia {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")
  listingId     Int?
  listing       Listing?     @relation(fields: [listingId], references: [id])
  platform      String
  url           String
  listingEdit   ListingEdit? @relation(fields: [listingEditId], references: [id])
  listingEditId Int?

  @@map("listing_social_media")
}

model ListingEdit {
  id          Int                  @id @default(autoincrement())
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @default(now()) @updatedAt @map("updated_at")
  listing     Listing              @relation(fields: [listingId], references: [id])
  listingId   Int
  title       String?
  website     String?
  description String?
  email       String?
  categoryId  Int?
  image       String?
  slug        String?
  category    Category?            @relation(fields: [categoryId], references: [id])
  tags        Tag[]
  location    ListingLocation?     @relation(fields: [locationId], references: [id])
  locationId  Int?
  user        User                 @relation(fields: [userId], references: [id])
  userId      String
  socials     ListingSocialMedia[]
  accepted    Boolean              @default(false)

  @@map("listing_edits")
}

model ListingLocation {
  id                 Int           @id @default(autoincrement())
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @default(now()) @updatedAt @map("updated_at")
  latitude           Float?
  longitude          Float?
  description        String?
  listing            Listing?
  noPhysicalLocation Boolean?      @map("no_physical_location")
  ListingEdit        ListingEdit[]

  @@map("listing_locations")
}

model WebLocation {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  latitude    Float?
  longitude   Float?
  description String?
  web         Web?

  @@map("web_locations")
}

model Permission {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  email     String    @unique
  user      User?     @relation(fields: [email], references: [email])
  webs      Web[]
  listings  Listing[]
}

model Ownership {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  email     String   @unique
  user      User?    @relation(fields: [email], references: [email])
  webs      Web[]

  @@map("ownership")
}

model WebFeature {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  webId     Int
  web       Web      @relation(fields: [webId], references: [id])
  feature   String
  enabled   Boolean  @default(false)

  @@unique([webId, feature])
  @@map("web_features")
}
